#!/usr/bin/env python3
"""
–°–∫—Ä–∏–ø—Ç –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
"""

import sys
import asyncio
from pathlib import Path

# –î–æ–±–∞–≤–ª—è–µ–º –ø—É—Ç—å –∫ src –≤ sys.path
sys.path.append(str(Path(__file__).parent.parent))

from src.database.connection import db_manager
from src.database.services import SignalService, PositionService, MetricsService
from src.database.models import SignalType, SignalStrength, PositionSide
from src.core.logger import setup_logging
from loguru import logger


async def test_database():
    """–¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö"""
    try:
        # –ù–∞—Å—Ç—Ä–∞–∏–≤–∞–µ–º –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ
        setup_logging()
        
        logger.info("üß™ –ù–∞—á–∏–Ω–∞–µ–º —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö...")
        
        # –ü–æ–¥–∫–ª—é—á–∞–µ–º—Å—è –∫ –ë–î
        if not await db_manager.connect():
            logger.error("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–¥–∫–ª—é—á–∏—Ç—å—Å—è –∫ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö")
            return False
        
        logger.info("‚úÖ –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ")
        
        # –¢–µ—Å—Ç 1: –°–æ–∑–¥–∞–Ω–∏–µ —Å–∏–≥–Ω–∞–ª–∞
        logger.info("üìä –¢–µ—Å—Ç 1: –°–æ–∑–¥–∞–Ω–∏–µ —Å–∏–≥–Ω–∞–ª–∞")
        signal = await SignalService.create_signal(
            strategy_id="test_strategy",
            symbol="EURUSD",
            timeframe="1h",
            signal_type=SignalType.BUY,
            strength=SignalStrength.MEDIUM,
            price=1.1000,
            confidence=0.75,
            stop_loss=1.0950,
            take_profit=1.1100
        )
        logger.info(f"‚úÖ –°–æ–∑–¥–∞–Ω —Å–∏–≥–Ω–∞–ª: {signal.signal_id}")
        
        # –¢–µ—Å—Ç 2: –°–æ–∑–¥–∞–Ω–∏–µ –ø–æ–∑–∏—Ü–∏–∏
        logger.info("üìä –¢–µ—Å—Ç 2: –°–æ–∑–¥–∞–Ω–∏–µ –ø–æ–∑–∏—Ü–∏–∏")
        position = await PositionService.create_position(
            strategy_id="test_strategy",
            symbol="EURUSD",
            side=PositionSide.LONG,
            size=0.01,
            entry_price=1.1000,
            signal_id=signal.signal_id,
            stop_loss=1.0950,
            take_profit=1.1100
        )
        logger.info(f"‚úÖ –°–æ–∑–¥–∞–Ω–∞ –ø–æ–∑–∏—Ü–∏—è: {position.position_id}")
        
        # –¢–µ—Å—Ç 3: –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Ü–µ–Ω –ø–æ–∑–∏—Ü–∏–∏
        logger.info("üìä –¢–µ—Å—Ç 3: –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Ü–µ–Ω –ø–æ–∑–∏—Ü–∏–∏")
        await position.update_pnl(1.1050)
        logger.info(f"‚úÖ –û–±–Ω–æ–≤–ª–µ–Ω PnL –ø–æ–∑–∏—Ü–∏–∏: {position.unrealized_pnl}")
        
        # –¢–µ—Å—Ç 4: –ó–∞–ø–∏—Å—å –º–µ—Ç—Ä–∏–∫
        logger.info("üìä –¢–µ—Å—Ç 4: –ó–∞–ø–∏—Å—å –º–µ—Ç—Ä–∏–∫")
        await MetricsService.record_live_metrics(
            strategy_id="test_strategy",
            sharpe_ratio=1.5,
            max_drawdown=0.1,
            win_rate=0.65,
            profit_factor=1.8,
            latency_ms=150,
            positions_count=1,
            pnl_daily=50.0,
            pnl_total=150.0,
            data_staleness_minutes=5,
            error_count=0,
            success_rate=0.95
        )
        logger.info("‚úÖ –ú–µ—Ç—Ä–∏–∫–∏ –∑–∞–ø–∏—Å–∞–Ω—ã")
        
        # –¢–µ—Å—Ç 5: –ü–æ–ª—É—á–µ–Ω–∏–µ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏
        logger.info("üìä –¢–µ—Å—Ç 5: –ü–æ–ª—É—á–µ–Ω–∏–µ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏")
        signal_stats = await SignalService.get_signal_stats("test_strategy")
        position_stats = await PositionService.get_position_stats("test_strategy")
        
        logger.info(f"üìà –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ —Å–∏–≥–Ω–∞–ª–æ–≤: {signal_stats}")
        logger.info(f"üìà –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø–æ–∑–∏—Ü–∏–π: {position_stats}")
        
        # –¢–µ—Å—Ç 6: –ü–æ–ª—É—á–µ–Ω–∏–µ –æ—Ç–∫—Ä—ã—Ç—ã—Ö –ø–æ–∑–∏—Ü–∏–π
        logger.info("üìä –¢–µ—Å—Ç 6: –ü–æ–ª—É—á–µ–Ω–∏–µ –æ—Ç–∫—Ä—ã—Ç—ã—Ö –ø–æ–∑–∏—Ü–∏–π")
        open_positions = await PositionService.get_open_positions("test_strategy")
        logger.info(f"üìà –û—Ç–∫—Ä—ã—Ç—ã—Ö –ø–æ–∑–∏—Ü–∏–π: {len(open_positions)}")
        
        # –¢–µ—Å—Ç 7: –ü–æ–ª—É—á–µ–Ω–∏–µ –ø–æ—Å–ª–µ–¥–Ω–∏—Ö –º–µ—Ç—Ä–∏–∫
        logger.info("üìä –¢–µ—Å—Ç 7: –ü–æ–ª—É—á–µ–Ω–∏–µ –ø–æ—Å–ª–µ–¥–Ω–∏—Ö –º–µ—Ç—Ä–∏–∫")
        latest_metrics = await MetricsService.get_latest_metrics("test_strategy")
        if latest_metrics:
            logger.info(f"üìà –ü–æ—Å–ª–µ–¥–Ω–∏–µ –º–µ—Ç—Ä–∏–∫–∏: {latest_metrics}")
        else:
            logger.warning("‚ö†Ô∏è –ú–µ—Ç—Ä–∏–∫–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω—ã")
        
        logger.info("‚úÖ –í—Å–µ —Ç–µ—Å—Ç—ã –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö –ø—Ä–æ—à–ª–∏ —É—Å–ø–µ—à–Ω–æ!")
        return True
        
    except Exception as e:
        logger.error(f"‚ùå –û—à–∏–±–∫–∞ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è: {e}")
        return False
    finally:
        await db_manager.disconnect()


async def main():
    """–û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è"""
    print("üß™ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö —Ç–æ—Ä–≥–æ–≤–æ–≥–æ AI-–∞–≥–µ–Ω—Ç–∞")
    print("=" * 50)
    
    success = await test_database()
    
    if success:
        print("\n‚úÖ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö –∑–∞–≤–µ—Ä—à–µ–Ω–æ —É—Å–ø–µ—à–Ω–æ!")
        print("\nüìã –ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö –≥–æ—Ç–æ–≤–∞ –∫ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—é")
    else:
        print("\n‚ùå –û—à–∏–±–∫–∞ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö")
        sys.exit(1)


if __name__ == "__main__":
    asyncio.run(main())

#!/usr/bin/env python3
"""
E2E —Ç–µ—Å—Ç —Ç–æ—Ä–≥–æ–≤–æ–≥–æ AI-–∞–≥–µ–Ω—Ç–∞ –≤ paper —Ä–µ–∂–∏–º–µ
"""

import sys
import asyncio
import pandas as pd
from pathlib import Path
from datetime import datetime, timedelta

# –î–æ–±–∞–≤–ª—è–µ–º –ø—É—Ç—å –∫ src –≤ sys.path
sys.path.append(str(Path(__file__).parent.parent))

from src.core.logger import setup_logging
from src.data.adapters import AsyncFundingPipsAdapter, create_test_data
from src.execution.paper_broker import PaperBroker
from src.database.connection import db_manager
from src.database.services import SignalService, PositionService, RunService
from src.database.models import SignalType, SignalStrength, PositionSide
from loguru import logger


async def test_e2e_pipeline():
    """E2E —Ç–µ—Å—Ç –ø–æ–ª–Ω–æ–≥–æ –ø–∞–π–ø–ª–∞–π–Ω–∞"""
    logger.info("üß™ –ó–∞–ø—É—Å–∫ E2E —Ç–µ—Å—Ç–∞ —Ç–æ—Ä–≥–æ–≤–æ–≥–æ AI-–∞–≥–µ–Ω—Ç–∞")
    
    try:
        # 1. –ü–æ–¥–∫–ª—é—á–∞–µ–º—Å—è –∫ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö
        logger.info("1Ô∏è‚É£ –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö...")
        if not await db_manager.connect():
            raise Exception("–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–¥–∫–ª—é—á–∏—Ç—å—Å—è –∫ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö")
        logger.info("‚úÖ –ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö –ø–æ–¥–∫–ª—é—á–µ–Ω–∞")
        
        # 2. –°–æ–∑–¥–∞–µ–º —Ç–µ—Å—Ç–æ–≤—ã–µ –¥–∞–Ω–Ω—ã–µ
        logger.info("2Ô∏è‚É£ –°–æ–∑–¥–∞–Ω–∏–µ —Ç–µ—Å—Ç–æ–≤—ã—Ö –¥–∞–Ω–Ω—ã—Ö...")
        test_data = create_test_data("EURUSD", days=7)
        logger.info(f"‚úÖ –°–æ–∑–¥–∞–Ω–æ {len(test_data)} –∑–∞–ø–∏—Å–µ–π –¥–∞–Ω–Ω—ã—Ö")
        
        # 3. –°–æ–∑–¥–∞–µ–º –∞–¥–∞–ø—Ç–µ—Ä—ã –∏ –±—Ä–æ–∫–µ—Ä–∞
        logger.info("3Ô∏è‚É£ –°–æ–∑–¥–∞–Ω–∏–µ –∞–¥–∞–ø—Ç–µ—Ä–æ–≤ –∏ –±—Ä–æ–∫–µ—Ä–∞...")
        data_feed = AsyncFundingPipsAdapter(test_data)
        paper_broker = PaperBroker(data_feed, initial_balance=10000.0)
        
        await data_feed.connect()
        await paper_broker.connect()
        logger.info("‚úÖ –ê–¥–∞–ø—Ç–µ—Ä—ã –∏ –±—Ä–æ–∫–µ—Ä –ø–æ–¥–∫–ª—é—á–µ–Ω—ã")
        
        # 4. –°–æ–∑–¥–∞–µ–º —Ç–µ—Å—Ç–æ–≤—ã–π –∑–∞–ø—É—Å–∫
        logger.info("4Ô∏è‚É£ –°–æ–∑–¥–∞–Ω–∏–µ —Ç–µ—Å—Ç–æ–≤–æ–≥–æ –∑–∞–ø—É—Å–∫–∞...")
        run = await RunService.create_run(
            strategy_id="test_strategy",
            stage="running",
            model_id="test_model",
            created_by="e2e_test"
        )
        logger.info(f"‚úÖ –°–æ–∑–¥–∞–Ω –∑–∞–ø—É—Å–∫: {run.run_id}")
        
        # 5. –¢–µ—Å—Ç–∏—Ä—É–µ–º –ø–æ–ª—É—á–µ–Ω–∏–µ –∏—Å—Ç–æ—Ä–∏—á–µ—Å–∫–∏—Ö –¥–∞–Ω–Ω—ã—Ö
        logger.info("5Ô∏è‚É£ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –ø–æ–ª—É—á–µ–Ω–∏—è –∏—Å—Ç–æ—Ä–∏—á–µ—Å–∫–∏—Ö –¥–∞–Ω–Ω—ã—Ö...")
        history = await data_feed.history("EURUSD", "1h", limit=50)
        logger.info(f"‚úÖ –ü–æ–ª—É—á–µ–Ω–æ {len(history)} –∏—Å—Ç–æ—Ä–∏—á–µ—Å–∫–∏—Ö –∑–∞–ø–∏—Å–µ–π")
        
        # 6. –¢–µ—Å—Ç–∏—Ä—É–µ–º —Å–æ–∑–¥–∞–Ω–∏–µ —Å–∏–≥–Ω–∞–ª–∞
        logger.info("6Ô∏è‚É£ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Å–æ–∑–¥–∞–Ω–∏—è —Å–∏–≥–Ω–∞–ª–∞...")
        signal = await SignalService.create_signal(
            strategy_id="test_strategy",
            symbol="EURUSD",
            timeframe="1h",
            signal_type=SignalType.BUY,
            strength=SignalStrength.MEDIUM,
            price=1.1000,
            confidence=0.75,
            stop_loss=1.0950,
            take_profit=1.1100,
            reason="E2E test signal"
        )
        logger.info(f"‚úÖ –°–æ–∑–¥–∞–Ω —Å–∏–≥–Ω–∞–ª: {signal.signal_id}")
        
        # 7. –¢–µ—Å—Ç–∏—Ä—É–µ–º —Å–æ–∑–¥–∞–Ω–∏–µ –æ—Ä–¥–µ—Ä–∞
        logger.info("7Ô∏è‚É£ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Å–æ–∑–¥–∞–Ω–∏—è –æ—Ä–¥–µ—Ä–∞...")
        order_id = await paper_broker.create_order(
            symbol="EURUSD",
            side="BUY",
            order_type="MARKET",
            quantity=0.01,
            client_id="e2e_test_order"
        )
        logger.info(f"‚úÖ –°–æ–∑–¥–∞–Ω –æ—Ä–¥–µ—Ä: {order_id}")
        
        # 8. –ñ–¥–µ–º –∏—Å–ø–æ–ª–Ω–µ–Ω–∏—è –æ—Ä–¥–µ—Ä–∞
        logger.info("8Ô∏è‚É£ –û–∂–∏–¥–∞–Ω–∏–µ –∏—Å–ø–æ–ª–Ω–µ–Ω–∏—è –æ—Ä–¥–µ—Ä–∞...")
        await asyncio.sleep(3)  # –ñ–¥–µ–º –∏—Å–ø–æ–ª–Ω–µ–Ω–∏—è
        
        # 9. –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—Ç–∞—Ç—É—Å –æ—Ä–¥–µ—Ä–∞
        logger.info("9Ô∏è‚É£ –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å—Ç–∞—Ç—É—Å–∞ –æ—Ä–¥–µ—Ä–∞...")
        order = await paper_broker.get_order(order_id)
        if order:
            logger.info(f"‚úÖ –°—Ç–∞—Ç—É—Å –æ—Ä–¥–µ—Ä–∞: {order.status.value}")
            logger.info(f"‚úÖ –ò—Å–ø–æ–ª–Ω–µ–Ω–æ: {order.filled_quantity}")
        
        # 10. –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø–æ–∑–∏—Ü–∏–∏
        logger.info("üîü –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø–æ–∑–∏—Ü–∏–π...")
        positions = await paper_broker.get_positions()
        logger.info(f"‚úÖ –ê–∫—Ç–∏–≤–Ω—ã–µ –ø–æ–∑–∏—Ü–∏–∏: {len(positions)}")
        for pos in positions:
            logger.info(f"   - {pos.symbol}: {pos.quantity} @ {pos.average_price}")
        
        # 11. –ü—Ä–æ–≤–µ—Ä—è–µ–º –±–∞–ª–∞–Ω—Å
        logger.info("1Ô∏è‚É£1Ô∏è‚É£ –ü—Ä–æ–≤–µ—Ä–∫–∞ –±–∞–ª–∞–Ω—Å–∞...")
        balance = await paper_broker.get_balance()
        logger.info(f"‚úÖ –ë–∞–ª–∞–Ω—Å: {balance}")
        
        # 12. –ü–æ–ª—É—á–∞–µ–º —Å–≤–æ–¥–∫—É –ø–æ —Å—á–µ—Ç—É
        logger.info("1Ô∏è‚É£2Ô∏è‚É£ –ü–æ–ª—É—á–µ–Ω–∏–µ —Å–≤–æ–¥–∫–∏ –ø–æ —Å—á–µ—Ç—É...")
        summary = paper_broker.get_account_summary()
        logger.info(f"‚úÖ –°–≤–æ–¥–∫–∞ —Å—á–µ—Ç–∞: {summary}")
        
        # 13. –¢–µ—Å—Ç–∏—Ä—É–µ–º –ø–æ–ª—É—á–µ–Ω–∏–µ —Å–∏–≥–Ω–∞–ª–æ–≤ –∏–∑ –ë–î
        logger.info("1Ô∏è‚É£3Ô∏è‚É£ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –ø–æ–ª—É—á–µ–Ω–∏—è —Å–∏–≥–Ω–∞–ª–æ–≤ –∏–∑ –ë–î...")
        signals = await SignalService.get_recent_signals("test_strategy", hours=24)
        logger.info(f"‚úÖ –ü–æ–ª—É—á–µ–Ω–æ {len(signals)} —Å–∏–≥–Ω–∞–ª–æ–≤ –∏–∑ –ë–î")
        
        # 14. –¢–µ—Å—Ç–∏—Ä—É–µ–º –ø–æ–ª—É—á–µ–Ω–∏–µ –ø–æ–∑–∏—Ü–∏–π –∏–∑ –ë–î
        logger.info("1Ô∏è‚É£4Ô∏è‚É£ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –ø–æ–ª—É—á–µ–Ω–∏—è –ø–æ–∑–∏—Ü–∏–π –∏–∑ –ë–î...")
        db_positions = await PositionService.get_open_positions("test_strategy")
        logger.info(f"‚úÖ –ü–æ–ª—É—á–µ–Ω–æ {len(db_positions)} –ø–æ–∑–∏—Ü–∏–π –∏–∑ –ë–î")
        
        # 15. –¢–µ—Å—Ç–∏—Ä—É–µ–º live –ø–æ–¥–ø–∏—Å–∫—É (–Ω–µ—Å–∫–æ–ª—å–∫–æ –±–∞—Ä–æ–≤)
        logger.info("1Ô∏è‚É£5Ô∏è‚É£ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ live –ø–æ–¥–ø–∏—Å–∫–∏...")
        bar_count = 0
        async for bar in data_feed.subscribe("EURUSD", "1h"):
            bar_count += 1
            logger.info(f"   –ü–æ–ª—É—á–µ–Ω –±–∞—Ä {bar_count}: {bar.timestamp} - {bar.close:.4f}")
            if bar_count >= 5:  # –û–≥—Ä–∞–Ω–∏—á–∏–≤–∞–µ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –¥–ª—è —Ç–µ—Å—Ç–∞
                break
        
        logger.info(f"‚úÖ –ü–æ–ª—É—á–µ–Ω–æ {bar_count} live –±–∞—Ä–æ–≤")
        
        # 16. –û—á–∏—Å—Ç–∫–∞
        logger.info("1Ô∏è‚É£6Ô∏è‚É£ –û—á–∏—Å—Ç–∫–∞ —Ä–µ—Å—É—Ä—Å–æ–≤...")
        await paper_broker.disconnect()
        await data_feed.disconnect()
        await db_manager.disconnect()
        logger.info("‚úÖ –†–µ—Å—É—Ä—Å—ã –æ—á–∏—â–µ–Ω—ã")
        
        logger.info("üéâ E2E —Ç–µ—Å—Ç –∑–∞–≤–µ—Ä—à–µ–Ω —É—Å–ø–µ—à–Ω–æ!")
        return True
        
    except Exception as e:
        logger.error(f"‚ùå –û—à–∏–±–∫–∞ –≤ E2E —Ç–µ—Å—Ç–µ: {e}")
        return False


async def main():
    """–ì–ª–∞–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è"""
    print("üß™ E2E —Ç–µ—Å—Ç —Ç–æ—Ä–≥–æ–≤–æ–≥–æ AI-–∞–≥–µ–Ω—Ç–∞")
    print("=" * 50)
    
    # –ù–∞—Å—Ç—Ä–∞–∏–≤–∞–µ–º –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ
    setup_logging()
    
    success = await test_e2e_pipeline()
    
    if success:
        print("‚úÖ E2E —Ç–µ—Å—Ç –ø—Ä–æ—à–µ–ª —É—Å–ø–µ—à–Ω–æ!")
        sys.exit(0)
    else:
        print("‚ùå E2E —Ç–µ—Å—Ç –Ω–µ –ø—Ä–æ—à–µ–ª!")
        sys.exit(1)


if __name__ == "__main__":
    asyncio.run(main())

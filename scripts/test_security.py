#!/usr/bin/env python3
"""
–°–∫—Ä–∏–ø—Ç –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è —Å–∏—Å—Ç–µ–º—ã –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏
"""

import sys
import asyncio
import aiohttp
import json
import time
import hmac
import hashlib
from pathlib import Path

# –î–æ–±–∞–≤–ª—è–µ–º –ø—É—Ç—å –∫ src –≤ sys.path
sys.path.append(str(Path(__file__).parent.parent))

from src.security.webhook_auth import WebhookAuthenticator
from src.security.retry_policy import RetryManager, RetryConfig
from src.security.rate_limiter import RateLimiter, RateLimitConfig
from src.core.logger import setup_logging
from loguru import logger


class SecurityTester:
    """–¢–µ—Å—Ç–µ—Ä —Å–∏—Å—Ç–µ–º—ã –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏"""
    
    def __init__(self):
        self.base_url = "http://localhost:8000"
        self.webhook_secret = "test_secret_key"
        self.authenticator = WebhookAuthenticator()
        self.retry_manager = RetryManager()
        self.rate_limiter = RateLimiter(RateLimitConfig(requests_per_second=5.0))
    
    def create_webhook_signature(self, payload: str, timestamp: str) -> str:
        """–°–æ–∑–¥–∞–Ω–∏–µ –ø–æ–¥–ø–∏—Å–∏ –¥–ª—è –≤–µ–±-—Ö—É–∫–∞"""
        message = f"{timestamp}.{payload}"
        signature = hmac.new(
            self.webhook_secret.encode('utf-8'),
            message.encode('utf-8'),
            hashlib.sha256
        ).hexdigest()
        return f"sha256={signature}"
    
    async def test_webhook_auth(self):
        """–¢–µ—Å—Ç –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏–∏ –≤–µ–±-—Ö—É–∫–æ–≤"""
        logger.info("üß™ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏–∏ –≤–µ–±-—Ö—É–∫–æ–≤...")
        
        # –í–∞–ª–∏–¥–Ω—ã–π webhook
        payload = json.dumps({"type": "test", "data": "valid"})
        timestamp = str(int(time.time()))
        signature = self.create_webhook_signature(payload, timestamp)
        
        headers = {
            "X-Signature-256": signature,
            "X-Timestamp": timestamp,
            "Content-Type": "application/json"
        }
        
        async with aiohttp.ClientSession() as session:
            async with session.post(
                f"{self.base_url}/webhook/n8n",
                data=payload,
                headers=headers
            ) as response:
                if response.status == 200:
                    logger.info("‚úÖ –í–∞–ª–∏–¥–Ω—ã–π webhook –ø—Ä–∏–Ω—è—Ç")
                else:
                    logger.error(f"‚ùå –í–∞–ª–∏–¥–Ω—ã–π webhook –æ—Ç–∫–ª–æ–Ω–µ–Ω: {response.status}")
        
        # –ù–µ–≤–∞–ª–∏–¥–Ω—ã–π webhook (–Ω–µ–ø—Ä–∞–≤–∏–ª—å–Ω–∞—è –ø–æ–¥–ø–∏—Å—å)
        invalid_signature = "sha256=invalid_signature"
        headers["X-Signature-256"] = invalid_signature
        
        async with aiohttp.ClientSession() as session:
            async with session.post(
                f"{self.base_url}/webhook/n8n",
                data=payload,
                headers=headers
            ) as response:
                if response.status == 401:
                    logger.info("‚úÖ –ù–µ–≤–∞–ª–∏–¥–Ω—ã–π webhook –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ –æ—Ç–∫–ª–æ–Ω–µ–Ω")
                else:
                    logger.error(f"‚ùå –ù–µ–≤–∞–ª–∏–¥–Ω—ã–π webhook –Ω–µ –æ—Ç–∫–ª–æ–Ω–µ–Ω: {response.status}")
    
    async def test_rate_limiting(self):
        """–¢–µ—Å—Ç rate limiting"""
        logger.info("üß™ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ rate limiting...")
        
        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –º–Ω–æ–≥–æ –∑–∞–ø—Ä–æ—Å–æ–≤ –±—ã—Å—Ç—Ä–æ
        async with aiohttp.ClientSession() as session:
            success_count = 0
            rate_limited_count = 0
            
            for i in range(20):  # –ë–æ–ª—å—à–µ —á–µ–º –ª–∏–º–∏—Ç
                try:
                    async with session.get(f"{self.base_url}/health") as response:
                        if response.status == 200:
                            success_count += 1
                        elif response.status == 429:
                            rate_limited_count += 1
                            logger.info(f"‚úÖ Rate limit —Å—Ä–∞–±–æ—Ç–∞–ª –Ω–∞ –∑–∞–ø—Ä–æ—Å–µ {i+1}")
                            break
                except Exception as e:
                    logger.error(f"–û—à–∏–±–∫–∞ –∑–∞–ø—Ä–æ—Å–∞ {i+1}: {e}")
                
                # –ù–µ–±–æ–ª—å—à–∞—è –∑–∞–¥–µ—Ä–∂–∫–∞ –º–µ–∂–¥—É –∑–∞–ø—Ä–æ—Å–∞–º–∏
                await asyncio.sleep(0.1)
            
            logger.info(f"üìä –£—Å–ø–µ—à–Ω—ã—Ö –∑–∞–ø—Ä–æ—Å–æ–≤: {success_count}, Rate limited: {rate_limited_count}")
    
    async def test_backpressure(self):
        """–¢–µ—Å—Ç backpressure"""
        logger.info("üß™ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ backpressure...")
        
        # –°–æ–∑–¥–∞–µ–º –º–Ω–æ–≥–æ –æ–¥–Ω–æ–≤—Ä–µ–º–µ–Ω–Ω—ã—Ö –∑–∞–ø—Ä–æ—Å–æ–≤
        async def make_request(session, i):
            try:
                async with session.post(
                    f"{self.base_url}/signals",
                    json={
                        "strategy_id": f"test_strategy_{i}",
                        "symbol": "EURUSD",
                        "timeframe": "1h",
                        "signal_type": "BUY",
                        "strength": "MEDIUM",
                        "price": 1.1000,
                        "confidence": 0.75
                    }
                ) as response:
                    return response.status
            except Exception as e:
                logger.error(f"–û—à–∏–±–∫–∞ –∑–∞–ø—Ä–æ—Å–∞ {i}: {e}")
                return 500
        
        async with aiohttp.ClientSession() as session:
            # –°–æ–∑–¥–∞–µ–º –º–Ω–æ–≥–æ –∑–∞–¥–∞—á –æ–¥–Ω–æ–≤—Ä–µ–º–µ–Ω–Ω–æ
            tasks = [make_request(session, i) for i in range(50)]
            results = await asyncio.gather(*tasks, return_exceptions=True)
            
            success_count = sum(1 for r in results if r == 200)
            overloaded_count = sum(1 for r in results if r == 503)
            
            logger.info(f"üìä –£—Å–ø–µ—à–Ω—ã—Ö –∑–∞–ø—Ä–æ—Å–æ–≤: {success_count}, Overloaded: {overloaded_count}")
    
    async def test_retry_policy(self):
        """–¢–µ—Å—Ç retry –ø–æ–ª–∏—Ç–∏–∫–∏"""
        logger.info("üß™ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ retry –ø–æ–ª–∏—Ç–∏–∫–∏...")
        
        # –§—É–Ω–∫—Ü–∏—è, –∫–æ—Ç–æ—Ä–∞—è –∏–Ω–æ–≥–¥–∞ –ø–∞–¥–∞–µ—Ç
        call_count = 0
        
        async def flaky_function():
            nonlocal call_count
            call_count += 1
            if call_count < 3:
                raise Exception("–í—Ä–µ–º–µ–Ω–Ω–∞—è –æ—à–∏–±–∫–∞")
            return "–£—Å–ø–µ—Ö!"
        
        try:
            result = await self.retry_manager.execute_with_retry(
                func=flaky_function,
                execution_id="test_retry",
                params={},
                retry_config=RetryConfig(max_attempts=3, base_delay=0.1)
            )
            
            logger.info(f"‚úÖ Retry –ø–æ–ª–∏—Ç–∏–∫–∞ —Ä–∞–±–æ—Ç–∞–µ—Ç: {result}")
            logger.info(f"üìä –§—É–Ω–∫—Ü–∏—è –≤—ã–∑–≤–∞–Ω–∞ {call_count} —Ä–∞–∑")
            
        except Exception as e:
            logger.error(f"‚ùå Retry –ø–æ–ª–∏—Ç–∏–∫–∞ –Ω–µ —Å—Ä–∞–±–æ—Ç–∞–ª–∞: {e}")
    
    async def test_idempotency(self):
        """–¢–µ—Å—Ç –∏–¥–µ–º–ø–æ—Ç–µ–Ω—Ç–Ω–æ—Å—Ç–∏"""
        logger.info("üß™ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∏–¥–µ–º–ø–æ—Ç–µ–Ω—Ç–Ω–æ—Å—Ç–∏...")
        
        # –§—É–Ω–∫—Ü–∏—è, –∫–æ—Ç–æ—Ä–∞—è –¥–æ–ª–∂–Ω–∞ –≤—ã–ø–æ–ª–Ω—è—Ç—å—Å—è —Ç–æ–ª—å–∫–æ –æ–¥–∏–Ω —Ä–∞–∑
        execution_count = 0
        
        async def expensive_function():
            nonlocal execution_count
            execution_count += 1
            await asyncio.sleep(0.1)  # –ò–º–∏—Ç–∞—Ü–∏—è –¥–æ–ª–≥–æ–π –æ–ø–µ—Ä–∞—Ü–∏–∏
            return f"–†–µ–∑—É–ª—å—Ç–∞—Ç {execution_count}"
        
        # –í—ã–ø–æ–ª–Ω—è–µ–º –æ–¥–Ω—É –∏ —Ç—É –∂–µ –æ–ø–µ—Ä–∞—Ü–∏—é –Ω–µ—Å–∫–æ–ª—å–∫–æ —Ä–∞–∑
        tasks = []
        for i in range(5):
            task = self.retry_manager.execute_with_retry(
                func=expensive_function,
                execution_id="test_idempotency",
                params={"param": "value"},
                idempotent=True
            )
            tasks.append(task)
        
        results = await asyncio.gather(*tasks)
        
        # –í—Å–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã –¥–æ–ª–∂–Ω—ã –±—ã—Ç—å –æ–¥–∏–Ω–∞–∫–æ–≤—ã–º–∏
        if all(r == results[0] for r in results):
            logger.info("‚úÖ –ò–¥–µ–º–ø–æ—Ç–µ–Ω—Ç–Ω–æ—Å—Ç—å —Ä–∞–±–æ—Ç–∞–µ—Ç –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ")
            logger.info(f"üìä –§—É–Ω–∫—Ü–∏—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∞ {execution_count} —Ä–∞–∑, –Ω–æ –≤–µ—Ä–Ω—É–ª–∞ {len(set(results))} —É–Ω–∏–∫–∞–ª—å–Ω—ã—Ö —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤")
        else:
            logger.error("‚ùå –ò–¥–µ–º–ø–æ—Ç–µ–Ω—Ç–Ω–æ—Å—Ç—å –Ω–µ —Ä–∞–±–æ—Ç–∞–µ—Ç")
    
    async def test_circuit_breaker(self):
        """–¢–µ—Å—Ç circuit breaker"""
        logger.info("üß™ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ circuit breaker...")
        
        from src.security.retry_policy import circuit_breaker
        
        # –§—É–Ω–∫—Ü–∏—è, –∫–æ—Ç–æ—Ä–∞—è –≤—Å–µ–≥–¥–∞ –ø–∞–¥–∞–µ—Ç
        async def failing_function():
            raise Exception("–í—Å–µ–≥–¥–∞ –ø–∞–¥–∞–µ—Ç")
        
        # –í—ã–ø–æ–ª–Ω—è–µ–º –Ω–µ—Å–∫–æ–ª—å–∫–æ —Ä–∞–∑, —á—Ç–æ–±—ã –æ—Ç–∫—Ä—ã—Ç—å circuit breaker
        for i in range(7):  # –ë–æ–ª—å—à–µ —á–µ–º failure_threshold (5)
            try:
                await circuit_breaker.call(failing_function)
            except Exception as e:
                if "Circuit breaker is OPEN" in str(e):
                    logger.info(f"‚úÖ Circuit breaker –æ—Ç–∫—Ä—ã–ª—Å—è –Ω–∞ –ø–æ–ø—ã—Ç–∫–µ {i+1}")
                    break
                elif i < 6:  # –ù–µ –ø–æ—Å–ª–µ–¥–Ω—è—è –ø–æ–ø—ã—Ç–∫–∞
                    logger.info(f"–ü–æ–ø—ã—Ç–∫–∞ {i+1}: {e}")
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ circuit breaker –æ—Ç–∫—Ä—ã—Ç
        try:
            await circuit_breaker.call(failing_function)
        except Exception as e:
            if "Circuit breaker is OPEN" in str(e):
                logger.info("‚úÖ Circuit breaker –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ –æ—Ç–∫—Ä—ã—Ç")
            else:
                logger.error("‚ùå Circuit breaker –Ω–µ –æ—Ç–∫—Ä—ã–ª—Å—è")
    
    async def run_all_tests(self):
        """–ó–∞–ø—É—Å–∫ –≤—Å–µ—Ö —Ç–µ—Å—Ç–æ–≤"""
        logger.info("üöÄ –ó–∞–ø—É—Å–∫ —Ç–µ—Å—Ç–æ–≤ —Å–∏—Å—Ç–µ–º—ã –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏...")
        
        try:
            await self.test_webhook_auth()
            await asyncio.sleep(1)
            
            await self.test_rate_limiting()
            await asyncio.sleep(1)
            
            await self.test_backpressure()
            await asyncio.sleep(1)
            
            await self.test_retry_policy()
            await asyncio.sleep(1)
            
            await self.test_idempotency()
            await asyncio.sleep(1)
            
            await self.test_circuit_breaker()
            
            logger.info("‚úÖ –í—Å–µ —Ç–µ—Å—Ç—ã –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏ –∑–∞–≤–µ—Ä—à–µ–Ω—ã!")
            
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –≤ —Ç–µ—Å—Ç–∞—Ö –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏: {e}")


async def main():
    """–û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è"""
    print("üîí –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Å–∏—Å—Ç–µ–º—ã –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏ —Ç–æ—Ä–≥–æ–≤–æ–≥–æ AI-–∞–≥–µ–Ω—Ç–∞")
    print("=" * 60)
    
    # –ù–∞—Å—Ç—Ä–∞–∏–≤–∞–µ–º –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ
    setup_logging()
    
    tester = SecurityTester()
    await tester.run_all_tests()


if __name__ == "__main__":
    asyncio.run(main())

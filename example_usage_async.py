"""
–ê—Å–∏–Ω—Ö—Ä–æ–Ω–Ω—ã–π –ø—Ä–∏–º–µ—Ä –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è —Ç–æ—Ä–≥–æ–≤–æ–≥–æ AI-–∞–≥–µ–Ω—Ç–∞
"""

import sys
import asyncio
from pathlib import Path
from datetime import datetime, timedelta
import pandas as pd

# –î–æ–±–∞–≤–ª—è–µ–º –ø—É—Ç—å –∫ src –≤ sys.path
sys.path.append(str(Path(__file__).parent))

from src.core.config import config
from src.core.logger import setup_logging
from src.data.adapters import AsyncFundingPipsAdapter, AsyncHashHedgeAdapter, create_test_data
from src.strategies.trend_following_strategy import TrendFollowingStrategy
from src.strategies.indicators import TechnicalIndicators
from src.execution.paper_broker import PaperBroker
from telegram_bot.bot import async_telegram_bot
from loguru import logger


async def example_data_collection():
    """–ü—Ä–∏–º–µ—Ä —Å–±–æ—Ä–∞ –¥–∞–Ω–Ω—ã—Ö"""
    logger.info("=== –ü—Ä–∏–º–µ—Ä —Å–±–æ—Ä–∞ –¥–∞–Ω–Ω—ã—Ö ===")
    
    # –°–æ–∑–¥–∞–µ–º —Ç–µ—Å—Ç–æ–≤—ã–µ –¥–∞–Ω–Ω—ã–µ
    test_data = create_test_data("EURUSD", days=7)
    
    logger.info(f"–°–æ–∑–¥–∞–Ω—ã —Ç–µ—Å—Ç–æ–≤—ã–µ –¥–∞–Ω–Ω—ã–µ: {len(test_data)} —Å–≤–µ—á–µ–π")
    logger.info(f"–ü–µ—Ä–∏–æ–¥: {test_data.index[0]} - {test_data.index[-1]}")
    logger.info(f"–¶–µ–Ω—ã: {test_data['close'].min():.4f} - {test_data['close'].max():.4f}")
    
    return test_data


async def example_indicators_calculation(data):
    """–ü—Ä–∏–º–µ—Ä —Ä–∞—Å—á–µ—Ç–∞ —Ç–µ—Ö–Ω–∏—á–µ—Å–∫–∏—Ö –∏–Ω–¥–∏–∫–∞—Ç–æ—Ä–æ–≤"""
    logger.info("=== –ü—Ä–∏–º–µ—Ä —Ä–∞—Å—á–µ—Ç–∞ –∏–Ω–¥–∏–∫–∞—Ç–æ—Ä–æ–≤ ===")
    
    # –°–æ–∑–¥–∞–µ–º –æ–±—ä–µ–∫—Ç –¥–ª—è —Ä–∞—Å—á–µ—Ç–∞ –∏–Ω–¥–∏–∫–∞—Ç–æ—Ä–æ–≤
    indicators = TechnicalIndicators(data)
    
    # –†–∞—Å—Å—á–∏—Ç—ã–≤–∞–µ–º —Ä–∞–∑–ª–∏—á–Ω—ã–µ –∏–Ω–¥–∏–∫–∞—Ç–æ—Ä—ã
    sma_20 = indicators.sma(20)
    sma_50 = indicators.sma(50)
    rsi = indicators.rsi(14)
    macd_line, macd_signal, macd_histogram = indicators.macd()
    
    # –í—ã–≤–æ–¥–∏–º –ø–æ—Å–ª–µ–¥–Ω–∏–µ –∑–Ω–∞—á–µ–Ω–∏—è
    logger.info(f"SMA(20): {sma_20.iloc[-1]:.4f}")
    logger.info(f"SMA(50): {sma_50.iloc[-1]:.4f}")
    logger.info(f"RSI(14): {rsi.iloc[-1]:.2f}")
    logger.info(f"MACD: {macd_line.iloc[-1]:.4f}")
    
    return {
        'sma_20': sma_20,
        'sma_50': sma_50,
        'rsi': rsi,
        'macd_line': macd_line,
        'macd_signal': macd_signal,
        'macd_histogram': macd_histogram
    }


async def example_strategy_execution():
    """–ü—Ä–∏–º–µ—Ä –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è —Å—Ç—Ä–∞—Ç–µ–≥–∏–∏"""
    logger.info("=== –ü—Ä–∏–º–µ—Ä –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è —Å—Ç—Ä–∞—Ç–µ–≥–∏–∏ ===")
    
    # –°–æ–∑–¥–∞–µ–º —Ç–µ—Å—Ç–æ–≤—ã–µ –¥–∞–Ω–Ω—ã–µ
    test_data = create_test_data("EURUSD", days=30)
    
    # –°–æ–∑–¥–∞–µ–º –∞–¥–∞–ø—Ç–µ—Ä—ã –¥–∞–Ω–Ω—ã—Ö
    fundingpips = AsyncFundingPipsAdapter(test_data)
    hashhedge = AsyncHashHedgeAdapter()
    
    # –ü–æ–¥–∫–ª—é—á–∞–µ–º—Å—è –∫ –∏—Å—Ç–æ—á–Ω–∏–∫–∞–º –¥–∞–Ω–Ω—ã—Ö
    await fundingpips.connect()
    await hashhedge.connect()
    
    # –°–æ–∑–¥–∞–µ–º —Å—Ç—Ä–∞—Ç–µ–≥–∏—é
    strategy = TrendFollowingStrategy()
    
    # –ù–∞—Å—Ç—Ä–∞–∏–≤–∞–µ–º –ø–∞—Ä–∞–º–µ—Ç—Ä—ã —Å—Ç—Ä–∞—Ç–µ–≥–∏–∏
    strategy.set_parameters({
        'sma_short': 20,
        'sma_long': 50,
        'rsi_period': 14,
        'rsi_oversold': 30,
        'rsi_overbought': 70,
        'stop_loss_pct': 0.02,
        'take_profit_pct': 0.04
    })
    
    logger.info("–°—Ç—Ä–∞—Ç–µ–≥–∏—è –Ω–∞—Å—Ç—Ä–æ–µ–Ω–∞ –∏ –≥–æ—Ç–æ–≤–∞ –∫ —Ä–∞–±–æ—Ç–µ")
    
    # –¢–µ—Å—Ç–∏—Ä—É–µ–º –ø–æ–ª—É—á–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö
    try:
        # –ü–æ–ª—É—á–∞–µ–º –∏—Å—Ç–æ—Ä–∏—á–µ—Å–∫–∏–µ –¥–∞–Ω–Ω—ã–µ
        history = await fundingpips.history("EURUSD", "1h", limit=100)
        logger.info(f"–ü–æ–ª—É—á–µ–Ω–æ {len(history)} –∏—Å—Ç–æ—Ä–∏—á–µ—Å–∫–∏—Ö –∑–∞–ø–∏—Å–µ–π")
        
        # –ü–æ–ª—É—á–∞–µ–º –ø–æ—Å–ª–µ–¥–Ω—é—é —Ü–µ–Ω—É
        latest_price = await fundingpips.get_latest_price("EURUSD")
        logger.info(f"–ü–æ—Å–ª–µ–¥–Ω—è—è —Ü–µ–Ω–∞ EURUSD: {latest_price:.4f}")
        
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö: {e}")
    
    return strategy


async def example_paper_trading():
    """–ü—Ä–∏–º–µ—Ä paper trading"""
    logger.info("=== –ü—Ä–∏–º–µ—Ä Paper Trading ===")
    
    # –°–æ–∑–¥–∞–µ–º —Ç–µ—Å—Ç–æ–≤—ã–µ –¥–∞–Ω–Ω—ã–µ
    test_data = create_test_data("EURUSD", days=7)
    
    # –°–æ–∑–¥–∞–µ–º –∞–¥–∞–ø—Ç–µ—Ä—ã
    data_feed = AsyncFundingPipsAdapter(test_data)
    paper_broker = PaperBroker(data_feed, initial_balance=10000.0)
    
    # –ü–æ–¥–∫–ª—é—á–∞–µ–º—Å—è
    await data_feed.connect()
    await paper_broker.connect()
    
    logger.info("Paper broker –ø–æ–¥–∫–ª—é—á–µ–Ω")
    
    # –¢–µ—Å—Ç–∏—Ä—É–µ–º —Å–æ–∑–¥–∞–Ω–∏–µ –æ—Ä–¥–µ—Ä–∞
    try:
        order_id = await paper_broker.create_order(
            symbol="EURUSD",
            side="BUY",
            order_type="MARKET",
            quantity=0.01,
            client_id="test_order_1"
        )
        
        logger.info(f"–°–æ–∑–¥–∞–Ω –æ—Ä–¥–µ—Ä: {order_id}")
        
        # –ñ–¥–µ–º –∏—Å–ø–æ–ª–Ω–µ–Ω–∏—è
        await asyncio.sleep(2)
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—Ç–∞—Ç—É—Å –æ—Ä–¥–µ—Ä–∞
        order = await paper_broker.get_order(order_id)
        if order:
            logger.info(f"–°—Ç–∞—Ç—É—Å –æ—Ä–¥–µ—Ä–∞: {order.status.value}")
            logger.info(f"–ò—Å–ø–æ–ª–Ω–µ–Ω–æ: {order.filled_quantity}")
        
        # –ü–æ–ª—É—á–∞–µ–º –ø–æ–∑–∏—Ü–∏–∏
        positions = await paper_broker.get_positions()
        logger.info(f"–ê–∫—Ç–∏–≤–Ω—ã–µ –ø–æ–∑–∏—Ü–∏–∏: {len(positions)}")
        
        # –ü–æ–ª—É—á–∞–µ–º –±–∞–ª–∞–Ω—Å
        balance = await paper_broker.get_balance()
        logger.info(f"–ë–∞–ª–∞–Ω—Å: {balance}")
        
        # –ü–æ–ª—É—á–∞–µ–º —Å–≤–æ–¥–∫—É –ø–æ —Å—á–µ—Ç—É
        summary = paper_broker.get_account_summary()
        logger.info(f"–°–≤–æ–¥–∫–∞ —Å—á–µ—Ç–∞: {summary}")
        
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ paper trading: {e}")
    
    finally:
        await paper_broker.disconnect()
        await data_feed.disconnect()


async def example_telegram_notifications():
    """–ü—Ä–∏–º–µ—Ä —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π –≤ Telegram"""
    logger.info("=== –ü—Ä–∏–º–µ—Ä Telegram —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π ===")
    
    try:
        # –¢–µ—Å—Ç–∏—Ä—É–µ–º –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ
        await async_telegram_bot.test_connection()
        
        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Ç–µ—Å—Ç–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
        await async_telegram_bot.send_alert(
            "–¢–µ—Å—Ç–æ–≤–æ–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ",
            "–≠—Ç–æ —Ç–µ—Å—Ç–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç —Ç–æ—Ä–≥–æ–≤–æ–≥–æ AI-–∞–≥–µ–Ω—Ç–∞",
            "INFO"
        )
        
        logger.info("Telegram —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ")
        
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ Telegram: {e}")


async def main():
    """–ì–ª–∞–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è"""
    print("üöÄ –ê—Å–∏–Ω—Ö—Ä–æ–Ω–Ω—ã–π –ø—Ä–∏–º–µ—Ä –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è —Ç–æ—Ä–≥–æ–≤–æ–≥–æ AI-–∞–≥–µ–Ω—Ç–∞")
    print("=" * 60)
    
    # –ù–∞—Å—Ç—Ä–∞–∏–≤–∞–µ–º –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ
    setup_logging()
    
    try:
        # 1. –°–±–æ—Ä –¥–∞–Ω–Ω—ã—Ö
        data = await example_data_collection()
        
        # 2. –†–∞—Å—á–µ—Ç –∏–Ω–¥–∏–∫–∞—Ç–æ—Ä–æ–≤
        indicators = await example_indicators_calculation(data)
        
        # 3. –í—ã–ø–æ–ª–Ω–µ–Ω–∏–µ —Å—Ç—Ä–∞—Ç–µ–≥–∏–∏
        strategy = await example_strategy_execution()
        
        # 4. Paper trading
        await example_paper_trading()
        
        # 5. Telegram —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è
        await example_telegram_notifications()
        
        logger.info("‚úÖ –í—Å–µ –ø—Ä–∏–º–µ—Ä—ã –≤—ã–ø–æ–ª–Ω–µ–Ω—ã —É—Å–ø–µ—à–Ω–æ!")
        
    except Exception as e:
        logger.error(f"‚ùå –û—à–∏–±–∫–∞ –≤ –ø—Ä–∏–º–µ—Ä–∞—Ö: {e}")


if __name__ == "__main__":
    asyncio.run(main())

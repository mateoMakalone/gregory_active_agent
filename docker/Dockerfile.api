# Multi-stage build для API сервера
FROM python:3.11-slim as builder

# --- build args to bust cache & track version ---
ARG GIT_SHA=dev
ENV BUILD_SHA=$GIT_SHA
LABEL org.opencontainers.image.revision=$GIT_SHA

# Установка системных зависимостей
RUN apt-get update && apt-get install -y \
    build-essential \
    curl \
    && rm -rf /var/lib/apt/lists/*

# Создание виртуального окружения
RUN python -m venv /opt/venv
ENV PATH="/opt/venv/bin:$PATH"

# Копирование requirements
COPY requirements.txt /app/requirements.txt

# Установка Python зависимостей
RUN pip install --no-cache-dir --upgrade pip && \
    pip install --no-cache-dir -r /app/requirements.txt

# Production stage
FROM python:3.11-slim

# --- build args to bust cache & track version ---
ARG GIT_SHA=dev
ENV BUILD_SHA=$GIT_SHA
LABEL org.opencontainers.image.revision=$GIT_SHA

# Создание пользователя без root привилегий
RUN groupadd -r trading && useradd -r -g trading trading

# Установка системных зависимостей
RUN apt-get update && apt-get install -y \
    curl \
    && rm -rf /var/lib/apt/lists/*

# Копирование виртуального окружения
COPY --from=builder /opt/venv /opt/venv
ENV PATH="/opt/venv/bin:$PATH"

# Создание рабочих директорий
RUN mkdir -p /app/logs /app/data /app/models && \
    chown -R trading:trading /app

# 1) зависимости отдельно
COPY requirements.txt /app/requirements.txt
RUN pip install --no-cache-dir -r /app/requirements.txt

# 2) код — отдельным слоем (инвалидирует кэш при любом изменении)
COPY . /app

# Установка рабочей директории
WORKDIR /app

# Переключение на пользователя trading
USER trading

# Переменные окружения
ENV PYTHONPATH=/app
ENV PYTHONUNBUFFERED=1
ENV LOG_LEVEL=INFO

# Health check
HEALTHCHECK --interval=30s --timeout=10s --start-period=5s --retries=3 \
    CMD curl -f http://localhost:8000/healthz || exit 1

# Expose порт
EXPOSE 8000

# Команда запуска
CMD ["python", "scripts/run_clean_api.py"]

# Trading AI Agent - Makefile

.PHONY: help install run test clean docker-build docker-run

help: ## –ü–æ–∫–∞–∑–∞—Ç—å —Å–ø—Ä–∞–≤–∫—É
	@echo "–î–æ—Å—Ç—É–ø–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã:"
	@grep -E '^[a-zA-Z_-]+:.*?## .*$$' $(MAKEFILE_LIST) | sort | awk 'BEGIN {FS = ":.*?## "}; {printf "\033[36m%-20s\033[0m %s\n", $$1, $$2}'

install: ## –£—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏
	python3 -m pip install -r requirements.txt

run: ## –ó–∞–ø—É—Å—Ç–∏—Ç—å —Å–∏—Å—Ç–µ–º—É (—Å–∏–Ω—Ö—Ä–æ–Ω–Ω–∞—è –≤–µ—Ä—Å–∏—è)
	python3 -m src.main

run-async: ## –ó–∞–ø—É—Å—Ç–∏—Ç—å —Å–∏—Å—Ç–µ–º—É (–∞—Å–∏–Ω—Ö—Ä–æ–Ω–Ω–∞—è –≤–µ—Ä—Å–∏—è)
	python3 run_async.py

run-dashboard: ## –ó–∞–ø—É—Å—Ç–∏—Ç—å —Ç–æ–ª—å–∫–æ –¥–∞—à–±–æ—Ä–¥
	streamlit run app/dashboard.py

run-bot: ## –ó–∞–ø—É—Å—Ç–∏—Ç—å —Ç–æ–ª—å–∫–æ Telegram-–±–æ—Ç–∞
	python3 run_bot.py

run-bot-async: ## –ó–∞–ø—É—Å—Ç–∏—Ç—å –∞—Å–∏–Ω—Ö—Ä–æ–Ω–Ω—ã–π Telegram-–±–æ—Ç
	python3 -c "import asyncio; from telegram_bot.async_bot import async_telegram_bot; asyncio.run(async_telegram_bot.test_connection())"

run-all: ## –ó–∞–ø—É—Å—Ç–∏—Ç—å –≤—Å–µ –∫–æ–º–ø–æ–Ω–µ–Ω—Ç—ã (legacy)
	python3 run_all.py

run-example: ## –ó–∞–ø—É—Å—Ç–∏—Ç—å –ø—Ä–∏–º–µ—Ä
	python3 run_example.py

# Quick start commands
start: ## üöÄ –ó–∞–ø—É—Å—Ç–∏—Ç—å –≤—Å—é —Å–∏—Å—Ç–µ–º—É –æ–¥–Ω–æ–π –∫–æ–º–∞–Ω–¥–æ–π
	./start_all.sh

stop: ## üõë –û—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –≤—Å—é —Å–∏—Å—Ç–µ–º—É
	./stop_all.sh

status: ## üìä –ü–æ–∫–∞–∑–∞—Ç—å —Å—Ç–∞—Ç—É—Å –≤—Å–µ—Ö –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–æ–≤
	./status.sh

# n8n controls
n8n-start: ## –ó–∞–ø—É—Å—Ç–∏—Ç—å —Ç–æ–ª—å–∫–æ n8n (Docker —Ç—Ä–µ–±—É–µ—Ç—Å—è)
	@if ! command -v docker >/dev/null 2>&1; then \
		echo "Docker –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω. –£—Å—Ç–∞–Ω–æ–≤–∏—Ç–µ Docker Desktop –∏ –ø–æ–≤—Ç–æ—Ä–∏—Ç–µ."; \
		exit 1; \
	fi
	@if ! docker ps >/dev/null 2>&1; then \
		echo "Docker –Ω–µ –∑–∞–ø—É—â–µ–Ω. –û—Ç–∫—Ä–æ–π—Ç–µ Docker Desktop –∏ –ø–æ–≤—Ç–æ—Ä–∏—Ç–µ."; \
		exit 1; \
	fi
	docker compose up -d n8n redis postgres
	@echo "–û—Ç–∫—Ä–æ–π—Ç–µ n8n UI: http://localhost:5678"

n8n-stop: ## –û—Å—Ç–∞–Ω–æ–≤–∏—Ç—å n8n –∏ –µ–≥–æ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏
	@if ! command -v docker >/dev/null 2>&1; then \
		echo "Docker –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω."; exit 0; \
	fi
	docker compose stop n8n

n8n-down: ## –ü–æ–ª–Ω–æ—Å—Ç—å—é –æ—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –∏ —É–¥–∞–ª–∏—Ç—å n8n+deps –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä—ã
	@if ! command -v docker >/dev/null 2>&1; then \
		echo "Docker –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω."; exit 0; \
	fi
	docker compose down

# Local commands (–±–µ–∑ Docker)
local-services: ## –ó–∞–ø—É—Å—Ç–∏—Ç—å –ª–æ–∫–∞–ª—å–Ω—ã–µ —Å–µ—Ä–≤–∏—Å—ã (PostgreSQL, Redis)
	brew services start postgresql@14
	brew services start redis

local-stop: ## –û—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –ª–æ–∫–∞–ª—å–Ω—ã–µ —Å–µ—Ä–≤–∏—Å—ã
	brew services stop postgresql@14  
	brew services stop redis

local-setup: ## –ù–∞—Å—Ç—Ä–æ–∏—Ç—å –ª–æ–∫–∞–ª—å–Ω—É—é –ë–î
	createdb gregory_orchestration || echo "–ë–î —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç"
	psql gregory_orchestration < ops/sql/init.sql || echo "–°—Ö–µ–º–∞ —É–∂–µ –ø—Ä–∏–º–µ–Ω–µ–Ω–∞"

local-dashboard: ## –ó–∞–ø—É—Å—Ç–∏—Ç—å dashboard –ª–æ–∫–∞–ª—å–Ω–æ (FastAPI)
	python3 -m uvicorn app.dashboard_fastapi:app --host 127.0.0.1 --port 8501

local-dashboard-streamlit: ## –ó–∞–ø—É—Å—Ç–∏—Ç—å dashboard –Ω–∞ Streamlit (–µ—Å–ª–∏ —Ä–∞–±–æ—Ç–∞–µ—Ç)
	python3 -m streamlit run app/dashboard.py --server.port=8501 --server.address=127.0.0.1

local-api: ## –ó–∞–ø—É—Å—Ç–∏—Ç—å API —Å–µ—Ä–≤–µ—Ä –ª–æ–∫–∞–ª—å–Ω–æ  
	python3 -m uvicorn app.api:app --host 127.0.0.1 --port 8000 --reload

# Orchestration commands (Docker)
docker-up: ## –ó–∞–ø—É—Å—Ç–∏—Ç—å –∏–Ω—Ñ—Ä–∞—Å—Ç—Ä—É–∫—Ç—É—Ä—É —Å n8n
	@if ! command -v docker >/dev/null 2>&1; then \
		echo "Docker –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω. –£—Å—Ç–∞–Ω–æ–≤–∏—Ç–µ Docker Desktop –∏ –ø–æ–≤—Ç–æ—Ä–∏—Ç–µ."; \
		exit 1; \
	fi
	@if ! docker ps >/dev/null 2>&1; then \
		echo "Docker –Ω–µ –∑–∞–ø—É—â–µ–Ω. –û—Ç–∫—Ä–æ–π—Ç–µ Docker Desktop –∏ –ø–æ–≤—Ç–æ—Ä–∏—Ç–µ."; \
		exit 1; \
	fi
	docker compose up -d

docker-down: ## –û—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –∏–Ω—Ñ—Ä–∞—Å—Ç—Ä—É–∫—Ç—É—Ä—É
	@if command -v docker >/dev/null 2>&1; then docker compose down; else echo "Docker –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω"; fi

docker-logs: ## –ü–æ–∫–∞–∑–∞—Ç—å –ª–æ–≥–∏ —Å–µ—Ä–≤–∏—Å–æ–≤
	@if command -v docker >/dev/null 2>&1; then docker compose logs -f; else echo "Docker –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω"; fi

api-test: ## –ü—Ä–æ–≤–µ—Ä–∏—Ç—å API –∑–¥–æ—Ä–æ–≤—å–µ
	curl -f http://localhost:8000/health || echo "API –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω"

n8n-ui: ## –û—Ç–∫—Ä—ã—Ç—å n8n UI (macOS)
	open http://localhost:5678

dashboard-ui: ## –û—Ç–∫—Ä—ã—Ç—å dashboard (macOS)
	open http://localhost:8501

trigger-retrain: ## –ó–∞–ø—É—Å—Ç–∏—Ç—å —Ä—É—á–Ω–æ–µ –ø–µ—Ä–µ–æ–±—É—á–µ–Ω–∏–µ
	curl -X POST http://localhost:5678/webhook/run-strategy \
		-H "Content-Type: application/json" \
		-d '{"strategy_id": "eurusd_mtf", "mode": "paper"}'

db-connect: ## –ü–æ–¥–∫–ª—é—á–∏—Ç—å—Å—è –∫ PostgreSQL
	docker exec -it gregory-postgres psql -U gregory -d gregory_orchestration

db-status: ## –ü–æ–∫–∞–∑–∞—Ç—å —Å—Ç–∞—Ç—É—Å –∑–∞–ø—É—Å–∫–æ–≤
	docker exec -it gregory-postgres psql -U gregory -d gregory_orchestration \
		-c "SELECT run_id, strategy_id, stage, status, progress, started_at FROM runs ORDER BY started_at DESC LIMIT 10;"

test: ## –ó–∞–ø—É—Å—Ç–∏—Ç—å —Ç–µ—Å—Ç—ã
	pytest tests/ -v

test-coverage: ## –ó–∞–ø—É—Å—Ç–∏—Ç—å —Ç–µ—Å—Ç—ã —Å –ø–æ–∫—Ä—ã—Ç–∏–µ–º
	pytest tests/ --cov=src --cov-report=html

clean: ## –û—á–∏—Å—Ç–∏—Ç—å –≤—Ä–µ–º–µ–Ω–Ω—ã–µ —Ñ–∞–π–ª—ã
	find . -type f -name "*.pyc" -delete
	find . -type d -name "__pycache__" -delete
	rm -rf .pytest_cache
	rm -rf htmlcov

docker-build: ## –°–æ–±—Ä–∞—Ç—å Docker –æ–±—Ä–∞–∑
	docker build -t trading-ai-agent .

docker-run: ## –ó–∞–ø—É—Å—Ç–∏—Ç—å –≤ Docker
	docker run -p 8501:8501 trading-ai-agent

format: ## –§–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞—Ç—å –∫–æ–¥
	black src/ app/ telegram_bot/ tests/
	flake8 src/ app/ telegram_bot/ tests/

type-check: ## –ü—Ä–æ–≤–µ—Ä–∏—Ç—å —Ç–∏–ø—ã
	mypy src/ app/ telegram_bot/

setup-dev: install ## –ù–∞—Å—Ç—Ä–æ–∏—Ç—å –æ–∫—Ä—É–∂–µ–Ω–∏–µ –¥–ª—è —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–∏
	pre-commit install

backtest: ## –ó–∞–ø—É—Å—Ç–∏—Ç—å –±—ç–∫—Ç–µ—Å—Ç–∏–Ω–≥
	python3 -m pipeline.backtest

train: ## –û–±—É—á–∏—Ç—å –º–æ–¥–µ–ª–∏
	python3 -m pipeline.train

data-collect: ## –°–æ–±—Ä–∞—Ç—å –¥–∞–Ω–Ω—ã–µ
	python3 -m pipeline.data_collector

"""
–ê—Å–∏–Ω—Ö—Ä–æ–Ω–Ω–∞—è –≤–µ—Ä—Å–∏—è –≥–ª–∞–≤–Ω–æ–≥–æ –º–æ–¥—É–ª—è —Ç–æ—Ä–≥–æ–≤–æ–≥–æ AI-–∞–≥–µ–Ω—Ç–∞
"""

import asyncio
import aiohttp
from datetime import datetime, timedelta
from typing import Dict, List, Optional
import pandas as pd
from loguru import logger

from .core.config import config
from .core.logger import setup_logging
from .data.adapters import AsyncFundingPipsAdapter, AsyncHashHedgeAdapter
from .strategies.trend_following_strategy import TrendFollowingStrategy
from .strategies.indicators import TechnicalIndicators
from .database.connection import db_manager
from .database.services import SignalService, PositionService, MetricsService
from .database.models import SignalType, SignalStrength, PositionSide
from telegram_bot.bot import async_telegram_bot


class AsyncTradingAgent:
    """–ê—Å–∏–Ω—Ö—Ä–æ–Ω–Ω–∞—è –≤–µ—Ä—Å–∏—è —Ç–æ—Ä–≥–æ–≤–æ–≥–æ –∞–≥–µ–Ω—Ç–∞"""
    
    def __init__(self):
        """–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –∞–≥–µ–Ω—Ç–∞"""
        self.setup_logging()
        self.setup_data_adapters()
        self.setup_strategies()
        self.is_running = False
        self.session = None
        self.db_connected = False
        
        logger.info("–ê—Å–∏–Ω—Ö—Ä–æ–Ω–Ω—ã–π —Ç–æ—Ä–≥–æ–≤—ã–π AI-–∞–≥–µ–Ω—Ç –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω")
    
    def setup_logging(self):
        """–ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è"""
        setup_logging()
        logger.info("–°–∏—Å—Ç–µ–º–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è –Ω–∞—Å—Ç—Ä–æ–µ–Ω–∞")
    
    def setup_data_adapters(self):
        """–ù–∞—Å—Ç—Ä–æ–π–∫–∞ –∞–¥–∞–ø—Ç–µ—Ä–æ–≤ –¥–∞–Ω–Ω—ã—Ö"""
        self.adapters = {}
        
        # FundingPips –¥–ª—è —Ñ–æ—Ä–µ–∫—Å/–∞–∫—Ü–∏–π
        fp_config = config.get('api.fundingpips', {})
        if fp_config.get('api_key'):
            self.adapters['fundingpips'] = AsyncFundingPipsAdapter(fp_config)
            logger.info("–ê–¥–∞–ø—Ç–µ—Ä FundingPips –Ω–∞—Å—Ç—Ä–æ–µ–Ω")
        
        # HashHedge –¥–ª—è –∫—Ä–∏–ø—Ç–æ–≤–∞–ª—é—Ç
        hh_config = config.get('api.hashhedge', {})
        if hh_config.get('api_key'):
            self.adapters['hashhedge'] = AsyncHashHedgeAdapter(hh_config)
            logger.info("–ê–¥–∞–ø—Ç–µ—Ä HashHedge –Ω–∞—Å—Ç—Ä–æ–µ–Ω")
        
        if not self.adapters:
            logger.warning("–ù–µ—Ç –Ω–∞—Å—Ç—Ä–æ–µ–Ω–Ω—ã—Ö –∞–¥–∞–ø—Ç–µ—Ä–æ–≤ –¥–∞–Ω–Ω—ã—Ö")
    
    def setup_strategies(self):
        """–ù–∞—Å—Ç—Ä–æ–π–∫–∞ —Ç–æ—Ä–≥–æ–≤—ã—Ö —Å—Ç—Ä–∞—Ç–µ–≥–∏–π"""
        self.strategies = []
        
        # –°—Ç—Ä–∞—Ç–µ–≥–∏—è —Å–ª–µ–¥–æ–≤–∞–Ω–∏—è –∑–∞ —Ç—Ä–µ–Ω–¥–æ–º
        trend_config = {
            'trend_sma_period': 50,
            'confirmation_sma_period': 20,
            'rsi_period': 14,
            'rsi_overbought': 70,
            'rsi_oversold': 30,
            'volume_threshold': 1.2,
            'min_confidence': 0.6,
            'max_signals_per_day': 10,
            'cooldown_minutes': 30
        }
        
        self.strategies.append(TrendFollowingStrategy(trend_config))
        logger.info(f"–ù–∞—Å—Ç—Ä–æ–µ–Ω–æ {len(self.strategies)} —Å—Ç—Ä–∞—Ç–µ–≥–∏–π")
    
    async def connect_database(self):
        """–ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö"""
        try:
            self.db_connected = await db_manager.connect()
            if self.db_connected:
                logger.info("‚úÖ –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ")
            else:
                logger.warning("‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–¥–∫–ª—é—á–∏—Ç—å—Å—è –∫ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö")
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ –ë–î: {e}")
            self.db_connected = False
    
    async def disconnect_database(self):
        """–û—Ç–∫–ª—é—á–µ–Ω–∏–µ –æ—Ç –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö"""
        try:
            await db_manager.disconnect()
            self.db_connected = False
            logger.info("üîå –û—Ç–∫–ª—é—á–µ–Ω–∏–µ –æ—Ç –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö")
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –æ—Ç–∫–ª—é—á–µ–Ω–∏—è –æ—Ç –ë–î: {e}")
    
    async def save_signal(self, strategy_id: str, symbol: str, timeframe: str, 
                         signal_type: str, strength: str, price: float, 
                         confidence: float, **kwargs) -> Optional[str]:
        """–°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ —Ç–æ—Ä–≥–æ–≤–æ–≥–æ —Å–∏–≥–Ω–∞–ª–∞ –≤ –ë–î"""
        if not self.db_connected:
            logger.warning("–ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö –Ω–µ –ø–æ–¥–∫–ª—é—á–µ–Ω–∞, —Å–∏–≥–Ω–∞–ª –Ω–µ —Å–æ—Ö—Ä–∞–Ω–µ–Ω")
            return None
        
        try:
            # –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ–º —Å—Ç—Ä–æ–∫–∏ –≤ enum
            signal_type_enum = SignalType(signal_type.upper())
            strength_enum = SignalStrength(strength.upper())
            
            signal = await SignalService.create_signal(
                strategy_id=strategy_id,
                symbol=symbol,
                timeframe=timeframe,
                signal_type=signal_type_enum,
                strength=strength_enum,
                price=price,
                confidence=confidence,
                **kwargs
            )
            
            logger.info(f"üíæ –°–∏–≥–Ω–∞–ª —Å–æ—Ö—Ä–∞–Ω–µ–Ω: {signal.signal_id}")
            return signal.signal_id
            
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è —Å–∏–≥–Ω–∞–ª–∞: {e}")
            return None
    
    async def save_position(self, strategy_id: str, symbol: str, side: str, 
                           size: float, entry_price: float, signal_id: str = None, 
                           **kwargs) -> Optional[str]:
        """–°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ —Ç–æ—Ä–≥–æ–≤–æ–π –ø–æ–∑–∏—Ü–∏–∏ –≤ –ë–î"""
        if not self.db_connected:
            logger.warning("–ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö –Ω–µ –ø–æ–¥–∫–ª—é—á–µ–Ω–∞, –ø–æ–∑–∏—Ü–∏—è –Ω–µ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∞")
            return None
        
        try:
            # –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ–º —Å—Ç—Ä–æ–∫—É –≤ enum
            side_enum = PositionSide(side.upper())
            
            position = await PositionService.create_position(
                strategy_id=strategy_id,
                symbol=symbol,
                side=side_enum,
                size=size,
                entry_price=entry_price,
                signal_id=signal_id,
                **kwargs
            )
            
            logger.info(f"üíæ –ü–æ–∑–∏—Ü–∏—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∞: {position.position_id}")
            return position.position_id
            
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –ø–æ–∑–∏—Ü–∏–∏: {e}")
            return None
    
    async def update_position_prices(self, symbol: str, current_price: float):
        """–û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Ü–µ–Ω –¥–ª—è –ø–æ–∑–∏—Ü–∏–π –ø–æ —Å–∏–º–≤–æ–ª—É"""
        if not self.db_connected:
            return
        
        try:
            await PositionService.update_position_prices(symbol, current_price)
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è —Ü–µ–Ω –ø–æ–∑–∏—Ü–∏–π: {e}")
    
    async def record_metrics(self, strategy_id: str, **metrics):
        """–ó–∞–ø–∏—Å—å –º–µ—Ç—Ä–∏–∫ –≤ –ë–î"""
        if not self.db_connected:
            return
        
        try:
            await MetricsService.record_live_metrics(strategy_id, **metrics)
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –∑–∞–ø–∏—Å–∏ –º–µ—Ç—Ä–∏–∫: {e}")
    
    async def connect_adapters(self) -> bool:
        """–ê—Å–∏–Ω—Ö—Ä–æ–Ω–Ω–æ–µ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ –∏—Å—Ç–æ—á–Ω–∏–∫–∞–º –¥–∞–Ω–Ω—ã—Ö"""
        connected = 0
        
        for name, adapter in self.adapters.items():
            if adapter.connect():
                connected += 1
                logger.info(f"–ê–¥–∞–ø—Ç–µ—Ä {name} –ø–æ–¥–∫–ª—é—á–µ–Ω")
            else:
                logger.error(f"–û—à–∏–±–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∞–¥–∞–ø—Ç–µ—Ä–∞ {name}")
        
        if connected == 0:
            logger.error("–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–¥–∫–ª—é—á–∏—Ç—å—Å—è –Ω–∏ –∫ –æ–¥–Ω–æ–º—É –∏—Å—Ç–æ—á–Ω–∏–∫—É –¥–∞–Ω–Ω—ã—Ö")
            return False
        
        logger.info(f"–ü–æ–¥–∫–ª—é—á–µ–Ω–æ {connected} –∞–¥–∞–ø—Ç–µ—Ä–æ–≤ –∏–∑ {len(self.adapters)}")
        return True
    
    async def disconnect_adapters(self):
        """–ê—Å–∏–Ω—Ö—Ä–æ–Ω–Ω–æ–µ –æ—Ç–∫–ª—é—á–µ–Ω–∏–µ –æ—Ç –∏—Å—Ç–æ—á–Ω–∏–∫–æ–≤ –¥–∞–Ω–Ω—ã—Ö"""
        for name, adapter in self.adapters.items():
            adapter.disconnect()
            logger.info(f"–ê–¥–∞–ø—Ç–µ—Ä {name} –æ—Ç–∫–ª—é—á–µ–Ω")
    
    async def collect_data_async(self, symbols: List[str], timeframes: List[str]) -> Dict[str, Dict[str, pd.DataFrame]]:
        """
        –ê—Å–∏–Ω—Ö—Ä–æ–Ω–Ω—ã–π —Å–±–æ—Ä –¥–∞–Ω–Ω—ã—Ö –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞
        
        Args:
            symbols: –°–ø–∏—Å–æ–∫ —Å–∏–º–≤–æ–ª–æ–≤ –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞
            timeframes: –°–ø–∏—Å–æ–∫ —Ç–∞–π–º—Ñ—Ä–µ–π–º–æ–≤
            
        Returns:
            –°–ª–æ–≤–∞—Ä—å —Å –¥–∞–Ω–Ω—ã–º–∏ {symbol: {timeframe: DataFrame}}
        """
        data = {}
        
        # –°–æ–∑–¥–∞–µ–º –∑–∞–¥–∞—á–∏ –¥–ª—è –ø–∞—Ä–∞–ª–ª–µ–ª—å–Ω–æ–≥–æ —Å–±–æ—Ä–∞ –¥–∞–Ω–Ω—ã—Ö
        tasks = []
        for symbol in symbols:
            data[symbol] = {}
            for timeframe in timeframes:
                task = self._collect_symbol_data(symbol, timeframe)
                tasks.append((symbol, timeframe, task))
        
        # –í—ã–ø–æ–ª–Ω—è–µ–º –≤—Å–µ –∑–∞–¥–∞—á–∏ –ø–∞—Ä–∞–ª–ª–µ–ª—å–Ω–æ
        results = await asyncio.gather(*[task for _, _, task in tasks], return_exceptions=True)
        
        # –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã
        for i, (symbol, timeframe, _) in enumerate(tasks):
            result = results[i]
            if isinstance(result, Exception):
                logger.error(f"–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö {symbol} {timeframe}: {result}")
            elif result and not result.data.empty:
                data[symbol][timeframe] = result.data
                logger.debug(f"–ü–æ–ª—É—á–µ–Ω—ã –¥–∞–Ω–Ω—ã–µ: {symbol} {timeframe}, {len(result.data)} —Å–≤–µ—á–µ–π")
            else:
                logger.warning(f"–ü—É—Å—Ç—ã–µ –¥–∞–Ω–Ω—ã–µ –¥–ª—è {symbol} {timeframe}")
        
        return data
    
    async def _collect_symbol_data(self, symbol: str, timeframe: str):
        """–ê—Å–∏–Ω—Ö—Ä–æ–Ω–Ω—ã–π —Å–±–æ—Ä –¥–∞–Ω–Ω—ã—Ö –¥–ª—è –æ–¥–Ω–æ–≥–æ —Å–∏–º–≤–æ–ª–∞"""
        try:
            # –û–ø—Ä–µ–¥–µ–ª—è–µ–º, –∫–∞–∫–æ–π –∞–¥–∞–ø—Ç–µ—Ä –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å
            adapter = self._get_adapter_for_symbol(symbol)
            if not adapter:
                logger.warning(f"–ù–µ—Ç –∞–¥–∞–ø—Ç–µ—Ä–∞ –¥–ª—è —Å–∏–º–≤–æ–ª–∞ {symbol}")
                return None
            
            # –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ –∑–∞ –ø–æ—Å–ª–µ–¥–Ω–∏–µ 24 —á–∞—Å–∞
            end_date = datetime.now()
            start_date = end_date - timedelta(days=1)
            
            # –ó–∞–ø—É—Å–∫–∞–µ–º –≤ –æ—Ç–¥–µ–ª—å–Ω–æ–º –ø–æ—Ç–æ–∫–µ, —á—Ç–æ–±—ã –Ω–µ –±–ª–æ–∫–∏—Ä–æ–≤–∞—Ç—å event loop
            loop = asyncio.get_running_loop()
            market_data = await loop.run_in_executor(
                None,
                lambda: adapter.get_historical_data(
                    symbol=symbol,
                    timeframe=timeframe,
                    start_date=start_date,
                    end_date=end_date,
                    limit=1000
                )
            )
            
            return market_data
            
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö {symbol} {timeframe}: {e}")
            return None
    
    def _get_adapter_for_symbol(self, symbol: str):
        """–ü–æ–ª—É—á–µ–Ω–∏–µ –∞–¥–∞–ø—Ç–µ—Ä–∞ –¥–ª—è —Å–∏–º–≤–æ–ª–∞"""
        # –ü—Ä–æ—Å—Ç–∞—è –ª–æ–≥–∏–∫–∞ –≤—ã–±–æ—Ä–∞ –∞–¥–∞–ø—Ç–µ—Ä–∞
        if 'USDT' in symbol or 'BTC' in symbol or 'ETH' in symbol:
            return self.adapters.get('hashhedge')
        else:
            return self.adapters.get('fundingpips')
    
    async def analyze_markets_async(self, data: Dict[str, Dict[str, pd.DataFrame]]) -> List:
        """
        –ê—Å–∏–Ω—Ö—Ä–æ–Ω–Ω—ã–π –∞–Ω–∞–ª–∏–∑ —Ä—ã–Ω–∫–æ–≤ –∏ –≥–µ–Ω–µ—Ä–∞—Ü–∏—è —Å–∏–≥–Ω–∞–ª–æ–≤
        
        Args:
            data: –°–æ–±—Ä–∞–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ
            
        Returns:
            –°–ø–∏—Å–æ–∫ —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö —Å–∏–≥–Ω–∞–ª–æ–≤
        """
        all_signals = []
        
        # –°–æ–∑–¥–∞–µ–º –∑–∞–¥–∞—á–∏ –¥–ª—è –ø–∞—Ä–∞–ª–ª–µ–ª—å–Ω–æ–≥–æ –∞–Ω–∞–ª–∏–∑–∞
        tasks = []
        for symbol, symbol_data in data.items():
            for strategy in self.strategies:
                if strategy.is_active:
                    task = self._analyze_symbol_strategy(symbol, symbol_data, strategy)
                    tasks.append(task)
        
        # –í—ã–ø–æ–ª–Ω—è–µ–º –∞–Ω–∞–ª–∏–∑ –ø–∞—Ä–∞–ª–ª–µ–ª—å–Ω–æ
        results = await asyncio.gather(*tasks, return_exceptions=True)
        
        # –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã
        for result in results:
            if isinstance(result, Exception):
                logger.error(f"–û—à–∏–±–∫–∞ –∞–Ω–∞–ª–∏–∑–∞: {result}")
            elif result:
                all_signals.append(result)
                logger.info(f"–°–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω —Å–∏–≥–Ω–∞–ª: {result}")
        
        return all_signals
    
    async def _analyze_symbol_strategy(self, symbol: str, symbol_data: Dict[str, pd.DataFrame], strategy):
        """–ê—Å–∏–Ω—Ö—Ä–æ–Ω–Ω—ã–π –∞–Ω–∞–ª–∏–∑ –æ–¥–Ω–æ–≥–æ —Å–∏–º–≤–æ–ª–∞ –æ–¥–Ω–æ–π —Å—Ç—Ä–∞—Ç–µ–≥–∏–µ–π"""
        try:
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ –≤—Å–µ –Ω–µ–æ–±—Ö–æ–¥–∏–º—ã–µ —Ç–∞–π–º—Ñ—Ä–µ–π–º—ã
            required_timeframes = strategy.get_required_timeframes()
            missing_timeframes = [tf for tf in required_timeframes if tf not in symbol_data]
            
            if missing_timeframes:
                logger.warning(f"–°—Ç—Ä–∞—Ç–µ–≥–∏—è {strategy.name}: –æ—Ç—Å—É—Ç—Å—Ç–≤—É—é—Ç —Ç–∞–π–º—Ñ—Ä–µ–π–º—ã {missing_timeframes} –¥–ª—è {symbol}")
                return None
            
            # –ó–∞–ø—É—Å–∫–∞–µ–º –∞–Ω–∞–ª–∏–∑ –≤ –æ—Ç–¥–µ–ª—å–Ω–æ–º –ø–æ—Ç–æ–∫–µ
            loop = asyncio.get_running_loop()
            signal = await loop.run_in_executor(
                None,
                lambda: strategy.analyze(symbol_data)
            )
            
            return signal
            
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –∞–Ω–∞–ª–∏–∑–∞ —Å—Ç—Ä–∞—Ç–µ–≥–∏–∏ {strategy.name} –¥–ª—è {symbol}: {e}")
            return None
    
    async def send_signals_async(self, signals: List):
        """–ê—Å–∏–Ω—Ö—Ä–æ–Ω–Ω–∞—è –æ—Ç–ø—Ä–∞–≤–∫–∞ —Å–∏–≥–Ω–∞–ª–æ–≤ –≤ Telegram"""
        if not signals:
            return
        
        # –°–æ–∑–¥–∞–µ–º –∑–∞–¥–∞—á–∏ –¥–ª—è –ø–∞—Ä–∞–ª–ª–µ–ª—å–Ω–æ–π –æ—Ç–ø—Ä–∞–≤–∫–∏
        tasks = []
        for signal in signals:
            # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Å–∏–≥–Ω–∞–ª –≤ –ë–î
            signal_id = await self.save_signal(
                strategy_id=signal.get('strategy_id', 'default'),
                symbol=signal.get('symbol', ''),
                timeframe=signal.get('timeframe', '1h'),
                signal_type=signal.get('signal_type', 'HOLD'),
                strength=signal.get('strength', 'MEDIUM'),
                price=signal.get('price', 0.0),
                confidence=signal.get('confidence', 0.5),
                stop_loss=signal.get('stop_loss'),
                take_profit=signal.get('take_profit'),
                metadata=signal.get('metadata', {})
            )
            
            # –î–æ–±–∞–≤–ª—è–µ–º signal_id –∫ —Å–∏–≥–Ω–∞–ª—É
            if signal_id:
                signal['signal_id'] = signal_id
            
            # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –≤ Telegram
            task = async_telegram_bot.send_signal(signal)
            tasks.append(task)
        
        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –≤—Å–µ —Å–∏–≥–Ω–∞–ª—ã –ø–∞—Ä–∞–ª–ª–µ–ª—å–Ω–æ
        results = await asyncio.gather(*tasks, return_exceptions=True)
        
        # –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã
        for i, result in enumerate(results):
            if isinstance(result, Exception):
                logger.error(f"–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —Å–∏–≥–Ω–∞–ª–∞ {i}: {result}")
            elif result:
                logger.info(f"–°–∏–≥–Ω–∞–ª {i} –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω –≤ Telegram")
            else:
                logger.error(f"–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —Å–∏–≥–Ω–∞–ª–∞ {i}")
    
    async def run_cycle_async(self):
        """–í—ã–ø–æ–ª–Ω–µ–Ω–∏–µ –æ–¥–Ω–æ–≥–æ –∞—Å–∏–Ω—Ö—Ä–æ–Ω–Ω–æ–≥–æ —Ü–∏–∫–ª–∞ –∞–Ω–∞–ª–∏–∑–∞"""
        try:
            logger.info("–ù–∞—á–∞–ª–æ –∞—Å–∏–Ω—Ö—Ä–æ–Ω–Ω–æ–≥–æ —Ü–∏–∫–ª–∞ –∞–Ω–∞–ª–∏–∑–∞")
            
            # –ü–æ–ª—É—á–∞–µ–º –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é —Ç–æ—Ä–≥–æ–≤–ª–∏
            trading_config = config.trading_config
            symbols = []
            
            # –°–æ–±–∏—Ä–∞–µ–º —Å–∏–º–≤–æ–ª—ã –∏–∑ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏
            for asset_type, asset_symbols in trading_config.get('assets', {}).items():
                symbols.extend(asset_symbols)
            
            if not symbols:
                logger.warning("–ù–µ—Ç —Å–∏–º–≤–æ–ª–æ–≤ –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞")
                return
            
            # –ü–æ–ª—É—á–∞–µ–º —Ç–∞–π–º—Ñ—Ä–µ–π–º—ã
            timeframes = trading_config.get('timeframes', ['4h', '1h', '5m'])
            
            # –°–æ–±–∏—Ä–∞–µ–º –¥–∞–Ω–Ω—ã–µ –∞—Å–∏–Ω—Ö—Ä–æ–Ω–Ω–æ
            data = await self.collect_data_async(symbols, timeframes)
            
            if not data:
                logger.warning("–ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ–±—Ä–∞—Ç—å –¥–∞–Ω–Ω—ã–µ")
                return
            
            # –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º —Ä—ã–Ω–∫–∏ –∞—Å–∏–Ω—Ö—Ä–æ–Ω–Ω–æ
            signals = await self.analyze_markets_async(data)
            
            # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–∏–≥–Ω–∞–ª—ã –∞—Å–∏–Ω—Ö—Ä–æ–Ω–Ω–æ
            if signals:
                await self.send_signals_async(signals)
                logger.info(f"–û–±—Ä–∞–±–æ—Ç–∞–Ω–æ {len(signals)} —Å–∏–≥–Ω–∞–ª–æ–≤")
            else:
                logger.info("–°–∏–≥–Ω–∞–ª—ã –Ω–µ —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω—ã")
            
            # –ó–∞–ø–∏—Å—ã–≤–∞–µ–º –º–µ—Ç—Ä–∏–∫–∏
            await self.record_metrics(
                strategy_id="default",
                positions_count=len(await PositionService.get_open_positions()),
                latency_ms=int((asyncio.get_event_loop().time() - start_time) * 1000)
            )
            
            logger.info("–ê—Å–∏–Ω—Ö—Ä–æ–Ω–Ω—ã–π —Ü–∏–∫–ª –∞–Ω–∞–ª–∏–∑–∞ –∑–∞–≤–µ—Ä—à–µ–Ω")
            
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –≤ –∞—Å–∏–Ω—Ö—Ä–æ–Ω–Ω–æ–º —Ü–∏–∫–ª–µ –∞–Ω–∞–ª–∏–∑–∞: {e}")
    
    async def run_async(self, interval_minutes: int = 5):
        """
        –ê—Å–∏–Ω—Ö—Ä–æ–Ω–Ω—ã–π –∑–∞–ø—É—Å–∫ –∞–≥–µ–Ω—Ç–∞
        
        Args:
            interval_minutes: –ò–Ω—Ç–µ—Ä–≤–∞–ª –º–µ–∂–¥—É —Ü–∏–∫–ª–∞–º–∏ –≤ –º–∏–Ω—É—Ç–∞—Ö
        """
        logger.info(f"–ó–∞–ø—É—Å–∫ –∞—Å–∏–Ω—Ö—Ä–æ–Ω–Ω–æ–≥–æ —Ç–æ—Ä–≥–æ–≤–æ–≥–æ –∞–≥–µ–Ω—Ç–∞ (–∏–Ω—Ç–µ—Ä–≤–∞–ª: {interval_minutes} –º–∏–Ω—É—Ç)")
        
        # –ü–æ–¥–∫–ª—é—á–∞–µ–º—Å—è –∫ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö
        await self.connect_database()
        
        # –ü–æ–¥–∫–ª—é—á–∞–µ–º—Å—è –∫ –∏—Å—Ç–æ—á–Ω–∏–∫–∞–º –¥–∞–Ω–Ω—ã—Ö
        if not await self.connect_adapters():
            logger.error("–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–¥–∫–ª—é—á–∏—Ç—å—Å—è –∫ –∏—Å—Ç–æ—á–Ω–∏–∫–∞–º –¥–∞–Ω–Ω—ã—Ö")
            return
        
        # –¢–µ—Å—Ç–∏—Ä—É–µ–º Telegram-–±–æ—Ç–∞
        if await async_telegram_bot.test_connection():
            logger.info("Telegram-–±–æ—Ç –ø–æ–¥–∫–ª—é—á–µ–Ω")
        else:
            logger.warning("Telegram-–±–æ—Ç –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω")
        
        self.is_running = True
        
        try:
            while self.is_running:
                start_time = asyncio.get_event_loop().time()
                
                # –í—ã–ø–æ–ª–Ω—è–µ–º —Ü–∏–∫–ª –∞–Ω–∞–ª–∏–∑–∞
                await self.run_cycle_async()
                
                # –ñ–¥–µ–º –¥–æ —Å–ª–µ–¥—É—é—â–µ–≥–æ —Ü–∏–∫–ª–∞
                elapsed_time = asyncio.get_event_loop().time() - start_time
                sleep_time = max(0, interval_minutes * 60 - elapsed_time)
                
                if sleep_time > 0:
                    logger.info(f"–û–∂–∏–¥–∞–Ω–∏–µ {sleep_time:.1f} —Å–µ–∫—É–Ω–¥ –¥–æ —Å–ª–µ–¥—É—é—â–µ–≥–æ —Ü–∏–∫–ª–∞")
                    await asyncio.sleep(sleep_time)
                
        except KeyboardInterrupt:
            logger.info("–ü–æ–ª—É—á–µ–Ω —Å–∏–≥–Ω–∞–ª –æ—Å—Ç–∞–Ω–æ–≤–∫–∏")
        except Exception as e:
            logger.error(f"–ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞: {e}")
        finally:
            await self.stop_async()
    
    async def stop_async(self):
        """–ê—Å–∏–Ω—Ö—Ä–æ–Ω–Ω–∞—è –æ—Å—Ç–∞–Ω–æ–≤–∫–∞ –∞–≥–µ–Ω—Ç–∞"""
        logger.info("–û—Å—Ç–∞–Ω–æ–≤–∫–∞ –∞—Å–∏–Ω—Ö—Ä–æ–Ω–Ω–æ–≥–æ —Ç–æ—Ä–≥–æ–≤–æ–≥–æ –∞–≥–µ–Ω—Ç–∞")
        self.is_running = False
        await self.disconnect_adapters()
        await self.disconnect_database()
        logger.info("–ê–≥–µ–Ω—Ç –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω")
    
    def get_status(self) -> Dict:
        """–ü–æ–ª—É—á–µ–Ω–∏–µ —Å—Ç–∞—Ç—É—Å–∞ –∞–≥–µ–Ω—Ç–∞"""
        return {
            'is_running': self.is_running,
            'adapters_connected': sum(1 for adapter in self.adapters.values() if adapter.is_connected),
            'total_adapters': len(self.adapters),
            'active_strategies': sum(1 for strategy in self.strategies if strategy.is_active),
            'total_strategies': len(self.strategies),
            'telegram_available': async_telegram_bot.is_available
        }


async def main():
    """–ì–ª–∞–≤–Ω–∞—è –∞—Å–∏–Ω—Ö—Ä–æ–Ω–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è"""
    # –°–æ–∑–¥–∞–µ–º –∞–≥–µ–Ω—Ç–∞
    agent = AsyncTradingAgent()
    
    # –ó–∞–ø—É—Å–∫–∞–µ–º –∞–≥–µ–Ω—Ç–∞
    try:
        await agent.run_async(interval_minutes=5)
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –∑–∞–ø—É—Å–∫–∞ –∞–≥–µ–Ω—Ç–∞: {e}")
    finally:
        await agent.stop_async()


if __name__ == "__main__":
    asyncio.run(main())

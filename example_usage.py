"""
–ü—Ä–∏–º–µ—Ä –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è —Ç–æ—Ä–≥–æ–≤–æ–≥–æ AI-–∞–≥–µ–Ω—Ç–∞
"""

import sys
import os
from pathlib import Path
from datetime import datetime, timedelta
import pandas as pd

# –î–æ–±–∞–≤–ª—è–µ–º –ø—É—Ç—å –∫ src –≤ sys.path
sys.path.append(str(Path(__file__).parent))

from src.core.config import config
from src.core.logger import setup_logging
from src.data.adapters import AsyncFundingPipsAdapter, AsyncHashHedgeAdapter, create_test_data
from src.strategies.trend_following_strategy import TrendFollowingStrategy
from src.strategies.indicators import TechnicalIndicators
from telegram_bot.bot import telegram_bot
from loguru import logger


def example_data_collection():
    """–ü—Ä–∏–º–µ—Ä —Å–±–æ—Ä–∞ –¥–∞–Ω–Ω—ã—Ö"""
    logger.info("=== –ü—Ä–∏–º–µ—Ä —Å–±–æ—Ä–∞ –¥–∞–Ω–Ω—ã—Ö ===")
    
    # –°–æ–∑–¥–∞–µ–º —Ç–µ—Å—Ç–æ–≤—ã–µ –¥–∞–Ω–Ω—ã–µ
    test_data = create_test_data("EURUSD", days=7)
    
    logger.info(f"–°–æ–∑–¥–∞–Ω—ã —Ç–µ—Å—Ç–æ–≤—ã–µ –¥–∞–Ω–Ω—ã–µ: {len(test_data)} —Å–≤–µ—á–µ–π")
    logger.info(f"–ü–µ—Ä–∏–æ–¥: {test_data.index[0]} - {test_data.index[-1]}")
    logger.info(f"–¶–µ–Ω—ã: {test_data['close'].min():.4f} - {test_data['close'].max():.4f}")
    
    return test_data


def example_indicators_calculation(data):
    """–ü—Ä–∏–º–µ—Ä —Ä–∞—Å—á–µ—Ç–∞ —Ç–µ—Ö–Ω–∏—á–µ—Å–∫–∏—Ö –∏–Ω–¥–∏–∫–∞—Ç–æ—Ä–æ–≤"""
    logger.info("=== –ü—Ä–∏–º–µ—Ä —Ä–∞—Å—á–µ—Ç–∞ –∏–Ω–¥–∏–∫–∞—Ç–æ—Ä–æ–≤ ===")
    
    # –°–æ–∑–¥–∞–µ–º –æ–±—ä–µ–∫—Ç –¥–ª—è —Ä–∞—Å—á–µ—Ç–∞ –∏–Ω–¥–∏–∫–∞—Ç–æ—Ä–æ–≤
    indicators = TechnicalIndicators(data)
    
    # –†–∞—Å—Å—á–∏—Ç—ã–≤–∞–µ–º —Ä–∞–∑–ª–∏—á–Ω—ã–µ –∏–Ω–¥–∏–∫–∞—Ç–æ—Ä—ã
    sma_20 = indicators.sma(20)
    sma_50 = indicators.sma(50)
    rsi = indicators.rsi(14)
    macd_line, macd_signal, macd_histogram = indicators.macd()
    bb_upper, bb_middle, bb_lower = indicators.bollinger_bands()
    
    # –í—ã–≤–æ–¥–∏–º –ø–æ—Å–ª–µ–¥–Ω–∏–µ –∑–Ω–∞—á–µ–Ω–∏—è
    logger.info(f"SMA 20: {sma_20.iloc[-1]:.4f}")
    logger.info(f"SMA 50: {sma_50.iloc[-1]:.4f}")
    logger.info(f"RSI: {rsi.iloc[-1]:.2f}")
    logger.info(f"MACD: {macd_line.iloc[-1]:.6f}")
    logger.info(f"BB Upper: {bb_upper.iloc[-1]:.4f}")
    logger.info(f"BB Lower: {bb_lower.iloc[-1]:.4f}")
    
    return {
        'sma_20': sma_20,
        'sma_50': sma_50,
        'rsi': rsi,
        'macd_line': macd_line,
        'macd_signal': macd_signal,
        'macd_histogram': macd_histogram,
        'bb_upper': bb_upper,
        'bb_middle': bb_middle,
        'bb_lower': bb_lower
    }


def example_strategy_analysis(data):
    """–ü—Ä–∏–º–µ—Ä –∞–Ω–∞–ª–∏–∑–∞ —Å—Ç—Ä–∞—Ç–µ–≥–∏–∏"""
    logger.info("=== –ü—Ä–∏–º–µ—Ä –∞–Ω–∞–ª–∏–∑–∞ —Å—Ç—Ä–∞—Ç–µ–≥–∏–∏ ===")
    
    # –°–æ–∑–¥–∞–µ–º —Å—Ç—Ä–∞—Ç–µ–≥–∏—é
    strategy_config = {
        'trend_sma_period': 20,
        'confirmation_sma_period': 10,
        'rsi_period': 14,
        'rsi_overbought': 70,
        'rsi_oversold': 30,
        'volume_threshold': 1.2,
        'min_confidence': 0.6,
        'max_signals_per_day': 10,
        'cooldown_minutes': 30
    }
    
    strategy = TrendFollowingStrategy(strategy_config)
    
    # –ü–æ–¥–≥–æ—Ç–∞–≤–ª–∏–≤–∞–µ–º –¥–∞–Ω–Ω—ã–µ –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞ (—Å–∏–º—É–ª–∏—Ä—É–µ–º —Ä–∞–∑–Ω—ã–µ —Ç–∞–π–º—Ñ—Ä–µ–π–º—ã)
    data_4h = data.resample('4H').agg({
        'open': 'first',
        'high': 'max',
        'low': 'min',
        'close': 'last',
        'volume': 'sum'
    }).dropna()
    
    data_1h = data.resample('1H').agg({
        'open': 'first',
        'high': 'max',
        'low': 'min',
        'close': 'last',
        'volume': 'sum'
    }).dropna()
    
    data_5m = data.resample('5T').agg({
        'open': 'first',
        'high': 'max',
        'low': 'min',
        'close': 'last',
        'volume': 'sum'
    }).dropna()
    
    # –°–æ–∑–¥–∞–µ–º —Å–ª–æ–≤–∞—Ä—å —Å –¥–∞–Ω–Ω—ã–º–∏ –ø–æ —Ç–∞–π–º—Ñ—Ä–µ–π–º–∞–º
    multi_timeframe_data = {
        '4h': data_4h,
        '1h': data_1h,
        '5m': data_5m
    }
    
    # –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º –¥–∞–Ω–Ω—ã–µ
    signal = strategy.analyze(multi_timeframe_data)
    
    if signal:
        logger.info(f"–°–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω —Å–∏–≥–Ω–∞–ª: {signal}")
        logger.info(f"–¢–∏–ø: {signal.signal_type.value}")
        logger.info(f"–°–∏–ª–∞: {signal.strength.name}")
        logger.info(f"–£–≤–µ—Ä–µ–Ω–Ω–æ—Å—Ç—å: {signal.confidence:.2%}")
        logger.info(f"–¶–µ–Ω–∞: {signal.price:.4f}")
        
        if signal.stop_loss:
            logger.info(f"–°—Ç–æ–ø-–ª–æ—Å—Å: {signal.stop_loss:.4f}")
        if signal.take_profit:
            logger.info(f"–¢–µ–π–∫-–ø—Ä–æ—Ñ–∏—Ç: {signal.take_profit:.4f}")
    else:
        logger.info("–°–∏–≥–Ω–∞–ª –Ω–µ —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω")
    
    return signal


def example_telegram_notification(signal):
    """–ü—Ä–∏–º–µ—Ä –æ—Ç–ø—Ä–∞–≤–∫–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –≤ Telegram"""
    logger.info("=== –ü—Ä–∏–º–µ—Ä –æ—Ç–ø—Ä–∞–≤–∫–∏ –≤ Telegram ===")
    
    if signal:
        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–∏–≥–Ω–∞–ª
        success = telegram_bot.send_signal(signal)
        if success:
            logger.info("–°–∏–≥–Ω–∞–ª –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω –≤ Telegram")
        else:
            logger.warning("–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —Å–∏–≥–Ω–∞–ª–∞ –≤ Telegram")
    else:
        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Ç–µ—Å—Ç–æ–≤–æ–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ
        success = telegram_bot.send_alert(
            "ü§ñ –¢–µ—Å—Ç–æ–≤–æ–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ",
            "–¢–æ—Ä–≥–æ–≤—ã–π AI-–∞–≥–µ–Ω—Ç —Ä–∞–±–æ—Ç–∞–µ—Ç –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ!",
            "INFO"
        )
        if success:
            logger.info("–¢–µ—Å—Ç–æ–≤–æ–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –≤ Telegram")
        else:
            logger.warning("–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –≤ Telegram")


def example_performance_analysis(strategy):
    """–ü—Ä–∏–º–µ—Ä –∞–Ω–∞–ª–∏–∑–∞ –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏ —Å—Ç—Ä–∞—Ç–µ–≥–∏–∏"""
    logger.info("=== –ü—Ä–∏–º–µ—Ä –∞–Ω–∞–ª–∏–∑–∞ –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏ ===")
    
    # –ü–æ–ª—É—á–∞–µ–º –º–µ—Ç—Ä–∏–∫–∏ —Å—Ç—Ä–∞—Ç–µ–≥–∏–∏
    metrics = strategy.get_performance_metrics()
    
    if metrics:
        logger.info("–ú–µ—Ç—Ä–∏–∫–∏ –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏:")
        for key, value in metrics.items():
            logger.info(f"  {key}: {value}")
    else:
        logger.info("–ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞ –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏")


def main():
    """–ì–ª–∞–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –ø—Ä–∏–º–µ—Ä–∞"""
    # –ù–∞—Å—Ç—Ä–∞–∏–≤–∞–µ–º –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ
    setup_logging()
    
    logger.info("üöÄ –ó–∞–ø—É—Å–∫ –ø—Ä–∏–º–µ—Ä–∞ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è —Ç–æ—Ä–≥–æ–≤–æ–≥–æ AI-–∞–≥–µ–Ω—Ç–∞")
    
    try:
        # 1. –°–±–æ—Ä –¥–∞–Ω–Ω—ã—Ö
        data = example_data_collection()
        
        # 2. –†–∞—Å—á–µ—Ç –∏–Ω–¥–∏–∫–∞—Ç–æ—Ä–æ–≤
        indicators = example_indicators_calculation(data)
        
        # 3. –ê–Ω–∞–ª–∏–∑ —Å—Ç—Ä–∞—Ç–µ–≥–∏–∏
        signal = example_strategy_analysis(data)
        
        # 4. –û—Ç–ø—Ä–∞–≤–∫–∞ –≤ Telegram
        example_telegram_notification(signal)
        
        # 5. –ê–Ω–∞–ª–∏–∑ –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏
        if signal:
            strategy = TrendFollowingStrategy({})
            example_performance_analysis(strategy)
        
        logger.info("‚úÖ –ü—Ä–∏–º–µ—Ä –≤—ã–ø–æ–ª–Ω–µ–Ω —É—Å–ø–µ—à–Ω–æ!")
        
    except Exception as e:
        logger.error(f"‚ùå –û—à–∏–±–∫–∞ –≤ –ø—Ä–∏–º–µ—Ä–µ: {e}")
        raise


if __name__ == "__main__":
    main()


"""
–í–µ–±-–¥–∞—à–±–æ—Ä–¥ –¥–ª—è —Ç–æ—Ä–≥–æ–≤–æ–≥–æ AI-–∞–≥–µ–Ω—Ç–∞
"""

import streamlit as st
import pandas as pd
import plotly.graph_objects as go
import plotly.express as px
from datetime import datetime, timedelta
import sys
import os

# –î–æ–±–∞–≤–ª—è–µ–º –ø—É—Ç—å –∫ src –≤ sys.path
sys.path.append(os.path.join(os.path.dirname(__file__), '..'))

from src.core.config import config
from src.core.logger import logger
from src.strategies.base_strategy import SignalType, SignalStrength


class TradingDashboard:
    """–ö–ª–∞—Å—Å –¥–ª—è –≤–µ–±-–¥–∞—à–±–æ—Ä–¥–∞"""
    
    def __init__(self):
        """–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –¥–∞—à–±–æ—Ä–¥–∞"""
        self.setup_page_config()
        self.setup_sidebar()
    
    def setup_page_config(self):
        """–ù–∞—Å—Ç—Ä–æ–π–∫–∞ —Å—Ç—Ä–∞–Ω–∏—Ü—ã"""
        st.set_page_config(
            page_title="Trading AI Agent",
            page_icon="ü§ñ",
            layout="wide",
            initial_sidebar_state="expanded"
        )
    
    def setup_sidebar(self):
        """–ù–∞—Å—Ç—Ä–æ–π–∫–∞ –±–æ–∫–æ–≤–æ–π –ø–∞–Ω–µ–ª–∏"""
        st.sidebar.title("ü§ñ Trading AI Agent")
        st.sidebar.markdown("---")
        
        # –ù–∞–≤–∏–≥–∞—Ü–∏—è
        self.page = st.sidebar.selectbox(
            "–í—ã–±–µ—Ä–∏—Ç–µ —Å—Ç—Ä–∞–Ω–∏—Ü—É",
            ["üìä –û–±–∑–æ—Ä", "üìà –ì—Ä–∞—Ñ–∏–∫–∏", "üìã –°–∏–≥–Ω–∞–ª—ã", "üìä –ê–Ω–∞–ª–∏—Ç–∏–∫–∞", "‚öôÔ∏è –ù–∞—Å—Ç—Ä–æ–π–∫–∏"]
        )
        
        st.sidebar.markdown("---")
        
        # –°—Ç–∞—Ç—É—Å —Å–∏—Å—Ç–µ–º—ã
        st.sidebar.subheader("–°—Ç–∞—Ç—É—Å —Å–∏—Å—Ç–µ–º—ã")
        st.sidebar.success("üü¢ –°–∏—Å—Ç–µ–º–∞ –∞–∫—Ç–∏–≤–Ω–∞")
        
        # –ü–æ—Å–ª–µ–¥–Ω–µ–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ
        st.sidebar.info(f"üïê –ü–æ—Å–ª–µ–¥–Ω–µ–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ: {datetime.now().strftime('%H:%M:%S')}")
    
    def run(self):
        """–ó–∞–ø—É—Å–∫ –¥–∞—à–±–æ—Ä–¥–∞"""
        if self.page == "üìä –û–±–∑–æ—Ä":
            self.show_overview()
        elif self.page == "üìà –ì—Ä–∞—Ñ–∏–∫–∏":
            self.show_charts()
        elif self.page == "üìã –°–∏–≥–Ω–∞–ª—ã":
            self.show_signals()
        elif self.page == "üìä –ê–Ω–∞–ª–∏—Ç–∏–∫–∞":
            self.show_analytics()
        elif self.page == "‚öôÔ∏è –ù–∞—Å—Ç—Ä–æ–π–∫–∏":
            self.show_settings()
    
    def show_overview(self):
        """–°—Ç—Ä–∞–Ω–∏—Ü–∞ –æ–±–∑–æ—Ä–∞"""
        st.title("üìä –û–±–∑–æ—Ä —Å–∏—Å—Ç–µ–º—ã")
        
        # –û—Å–Ω–æ–≤–Ω—ã–µ –º–µ—Ç—Ä–∏–∫–∏
        col1, col2, col3, col4 = st.columns(4)
        
        with col1:
            st.metric(
                label="–ê–∫—Ç–∏–≤–Ω—ã—Ö —Å—Ç—Ä–∞—Ç–µ–≥–∏–π",
                value="2",
                delta="+1"
            )
        
        with col2:
            st.metric(
                label="–°–∏–≥–Ω–∞–ª–æ–≤ —Å–µ–≥–æ–¥–Ω—è",
                value="15",
                delta="+3"
            )
        
        with col3:
            st.metric(
                label="–£—Å–ø–µ—à–Ω—ã—Ö —Å–¥–µ–ª–æ–∫",
                value="12",
                delta="+2"
            )
        
        with col4:
            st.metric(
                label="–û–±—â–∞—è –ø—Ä–∏–±—ã–ª—å",
                value="+2.4%",
                delta="+0.3%"
            )
        
        st.markdown("---")
        
        # –ì—Ä–∞—Ñ–∏–∫ –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏
        st.subheader("üìà –ü—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å")
        
        # –°–æ–∑–¥–∞–µ–º —Ç–µ—Å—Ç–æ–≤—ã–µ –¥–∞–Ω–Ω—ã–µ
        dates = pd.date_range(start=datetime.now() - timedelta(days=30), end=datetime.now(), freq='D')
        performance_data = pd.DataFrame({
            'date': dates,
            'equity': 10000 + (dates - dates[0]).days * 10 + pd.Series(range(len(dates))) * 0.5
        })
        
        fig = px.line(performance_data, x='date', y='equity', title='–ö—Ä–∏–≤–∞—è –∫–∞–ø–∏—Ç–∞–ª–∞')
        fig.update_layout(height=400)
        st.plotly_chart(fig, use_container_width=True)
        
        # –ü–æ—Å–ª–µ–¥–Ω–∏–µ —Å–∏–≥–Ω–∞–ª—ã
        st.subheader("üîî –ü–æ—Å–ª–µ–¥–Ω–∏–µ —Å–∏–≥–Ω–∞–ª—ã")
        
        # –°–æ–∑–¥–∞–µ–º —Ç–µ—Å—Ç–æ–≤—ã–µ –¥–∞–Ω–Ω—ã–µ —Å–∏–≥–Ω–∞–ª–æ–≤
        signals_data = pd.DataFrame({
            '–í—Ä–µ–º—è': [datetime.now() - timedelta(hours=i) for i in range(5)],
            '–°–∏–º–≤–æ–ª': ['EURUSD', 'GBPUSD', 'BTCUSDT', 'ETHUSDT', 'ADAUSDT'],
            '–¢–∏–ø': ['BUY', 'SELL', 'BUY', 'SELL', 'BUY'],
            '–¶–µ–Ω–∞': [1.0850, 1.2650, 43250, 2650, 0.4850],
            '–£–≤–µ—Ä–µ–Ω–Ω–æ—Å—Ç—å': [0.85, 0.72, 0.91, 0.68, 0.79],
            '–°—Ç–∞—Ç—É—Å': ['–í—ã–ø–æ–ª–Ω–µ–Ω', '–û–∂–∏–¥–∞–µ—Ç', '–í—ã–ø–æ–ª–Ω–µ–Ω', '–û—Ç–º–µ–Ω–µ–Ω', '–û–∂–∏–¥–∞–µ—Ç']
        })
        
        st.dataframe(signals_data, use_container_width=True)
    
    def show_charts(self):
        """–°—Ç—Ä–∞–Ω–∏—Ü–∞ –≥—Ä–∞—Ñ–∏–∫–æ–≤"""
        st.title("üìà –ì—Ä–∞—Ñ–∏–∫–∏ –∏ –∞–Ω–∞–ª–∏–∑")
        
        # –í—ã–±–æ—Ä –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç–∞
        col1, col2, col3 = st.columns(3)
        
        with col1:
            symbol = st.selectbox("–í—ã–±–µ—Ä–∏—Ç–µ –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç", ["EURUSD", "GBPUSD", "BTCUSDT", "ETHUSDT"])
        
        with col2:
            timeframe = st.selectbox("–¢–∞–π–º—Ñ—Ä–µ–π–º", ["1m", "5m", "15m", "1h", "4h", "1d"])
        
        with col3:
            period = st.selectbox("–ü–µ—Ä–∏–æ–¥", ["1 –¥–µ–Ω—å", "1 –Ω–µ–¥–µ–ª—è", "1 –º–µ—Å—è—Ü", "3 –º–µ—Å—è—Ü–∞"])
        
        # –°–æ–∑–¥–∞–µ–º —Ç–µ—Å—Ç–æ–≤—ã–µ –¥–∞–Ω–Ω—ã–µ
        if st.button("üîÑ –û–±–Ω–æ–≤–∏—Ç—å –¥–∞–Ω–Ω—ã–µ"):
            st.success("–î–∞–Ω–Ω—ã–µ –æ–±–Ω–æ–≤–ª–µ–Ω—ã!")
        
        # –û—Å–Ω–æ–≤–Ω–æ–π –≥—Ä–∞—Ñ–∏–∫
        st.subheader(f"üìä {symbol} - {timeframe}")
        
        # –°–æ–∑–¥–∞–µ–º —Ç–µ—Å—Ç–æ–≤—ã–µ OHLC –¥–∞–Ω–Ω—ã–µ
        dates = pd.date_range(start=datetime.now() - timedelta(days=30), end=datetime.now(), freq='H')
        base_price = 1.0850 if 'USD' in symbol else 43250
        
        ohlc_data = pd.DataFrame({
            'timestamp': dates,
            'open': base_price + pd.Series(range(len(dates))) * 0.0001,
            'high': base_price + pd.Series(range(len(dates))) * 0.0001 + 0.001,
            'low': base_price + pd.Series(range(len(dates))) * 0.0001 - 0.001,
            'close': base_price + pd.Series(range(len(dates))) * 0.0001 + 0.0005,
            'volume': 1000 + pd.Series(range(len(dates))) * 10
        })
        
        # –°–æ–∑–¥–∞–µ–º —Å–≤–µ—á–Ω–æ–π –≥—Ä–∞—Ñ–∏–∫
        fig = go.Figure(data=go.Candlestick(
            x=ohlc_data['timestamp'],
            open=ohlc_data['open'],
            high=ohlc_data['high'],
            low=ohlc_data['low'],
            close=ohlc_data['close'],
            name=symbol
        ))
        
        # –î–æ–±–∞–≤–ª—è–µ–º —Å–∫–æ–ª—å–∑—è—â–∏–µ —Å—Ä–µ–¥–Ω–∏–µ
        ohlc_data['sma_20'] = ohlc_data['close'].rolling(20).mean()
        ohlc_data['sma_50'] = ohlc_data['close'].rolling(50).mean()
        
        fig.add_trace(go.Scatter(
            x=ohlc_data['timestamp'],
            y=ohlc_data['sma_20'],
            mode='lines',
            name='SMA 20',
            line=dict(color='orange', width=2)
        ))
        
        fig.add_trace(go.Scatter(
            x=ohlc_data['timestamp'],
            y=ohlc_data['sma_50'],
            mode='lines',
            name='SMA 50',
            line=dict(color='blue', width=2)
        ))
        
        fig.update_layout(
            title=f"{symbol} - {timeframe}",
            xaxis_title="–í—Ä–µ–º—è",
            yaxis_title="–¶–µ–Ω–∞",
            height=600
        )
        
        st.plotly_chart(fig, use_container_width=True)
        
        # –ò–Ω–¥–∏–∫–∞—Ç–æ—Ä—ã
        st.subheader("üìä –¢–µ—Ö–Ω–∏—á–µ—Å–∫–∏–µ –∏–Ω–¥–∏–∫–∞—Ç–æ—Ä—ã")
        
        col1, col2 = st.columns(2)
        
        with col1:
            # RSI
            rsi_data = pd.DataFrame({
                'timestamp': ohlc_data['timestamp'],
                'rsi': 50 + pd.Series(range(len(ohlc_data))) * 0.1
            })
            
            fig_rsi = px.line(rsi_data, x='timestamp', y='rsi', title='RSI (14)')
            fig_rsi.add_hline(y=70, line_dash="dash", line_color="red", annotation_text="–ü–µ—Ä–µ–∫—É–ø–ª–µ–Ω–Ω–æ—Å—Ç—å")
            fig_rsi.add_hline(y=30, line_dash="dash", line_color="green", annotation_text="–ü–µ—Ä–µ–ø—Ä–æ–¥–∞–Ω–Ω–æ—Å—Ç—å")
            st.plotly_chart(fig_rsi, use_container_width=True)
        
        with col2:
            # MACD
            macd_data = pd.DataFrame({
                'timestamp': ohlc_data['timestamp'],
                'macd': pd.Series(range(len(ohlc_data))) * 0.01,
                'signal': pd.Series(range(len(ohlc_data))) * 0.008,
                'histogram': pd.Series(range(len(ohlc_data))) * 0.002
            })
            
            fig_macd = go.Figure()
            fig_macd.add_trace(go.Scatter(x=macd_data['timestamp'], y=macd_data['macd'], name='MACD', line=dict(color='blue')))
            fig_macd.add_trace(go.Scatter(x=macd_data['timestamp'], y=macd_data['signal'], name='Signal', line=dict(color='red')))
            fig_macd.add_trace(go.Bar(x=macd_data['timestamp'], y=macd_data['histogram'], name='Histogram', marker_color='gray'))
            fig_macd.update_layout(title='MACD', height=300)
            st.plotly_chart(fig_macd, use_container_width=True)
    
    def show_signals(self):
        """–°—Ç—Ä–∞–Ω–∏—Ü–∞ —Å–∏–≥–Ω–∞–ª–æ–≤"""
        st.title("üìã –¢–æ—Ä–≥–æ–≤—ã–µ —Å–∏–≥–Ω–∞–ª—ã")
        
        # –§–∏–ª—å—Ç—Ä—ã
        col1, col2, col3, col4 = st.columns(4)
        
        with col1:
            signal_type = st.selectbox("–¢–∏–ø —Å–∏–≥–Ω–∞–ª–∞", ["–í—Å–µ", "BUY", "SELL"])
        
        with col2:
            symbol_filter = st.selectbox("–ò–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç", ["–í—Å–µ", "EURUSD", "GBPUSD", "BTCUSDT", "ETHUSDT"])
        
        with col3:
            strength_filter = st.selectbox("–°–∏–ª–∞ —Å–∏–≥–Ω–∞–ª–∞", ["–í—Å–µ", "WEAK", "MEDIUM", "STRONG"])
        
        with col4:
            date_range = st.selectbox("–ü–µ—Ä–∏–æ–¥", ["–°–µ–≥–æ–¥–Ω—è", "–ù–µ–¥–µ–ª—è", "–ú–µ—Å—è—Ü", "–í—Å–µ –≤—Ä–µ–º—è"])
        
        # –°–æ–∑–¥–∞–µ–º —Ç–µ—Å—Ç–æ–≤—ã–µ –¥–∞–Ω–Ω—ã–µ —Å–∏–≥–Ω–∞–ª–æ–≤
        signals_data = pd.DataFrame({
            '–í—Ä–µ–º—è': [datetime.now() - timedelta(hours=i) for i in range(20)],
            '–°–∏–º–≤–æ–ª': ['EURUSD', 'GBPUSD', 'BTCUSDT', 'ETHUSDT', 'ADAUSDT'] * 4,
            '–¢–∏–ø': ['BUY', 'SELL', 'BUY', 'SELL', 'BUY'] * 4,
            '–¶–µ–Ω–∞': [1.0850, 1.2650, 43250, 2650, 0.4850] * 4,
            '–£–≤–µ—Ä–µ–Ω–Ω–æ—Å—Ç—å': [0.85, 0.72, 0.91, 0.68, 0.79] * 4,
            '–°–∏–ª–∞': ['STRONG', 'MEDIUM', 'STRONG', 'WEAK', 'MEDIUM'] * 4,
            '–°—Ç–æ–ø-–ª–æ—Å—Å': [1.0800, 1.2700, 42500, 2700, 0.4900] * 4,
            '–¢–µ–π–∫-–ø—Ä–æ—Ñ–∏—Ç': [1.0900, 1.2600, 44000, 2600, 0.4800] * 4,
            '–°—Ç–∞—Ç—É—Å': ['–í—ã–ø–æ–ª–Ω–µ–Ω', '–û–∂–∏–¥–∞–µ—Ç', '–í—ã–ø–æ–ª–Ω–µ–Ω', '–û—Ç–º–µ–Ω–µ–Ω', '–û–∂–∏–¥–∞–µ—Ç'] * 4
        })
        
        # –ü—Ä–∏–º–µ–Ω—è–µ–º —Ñ–∏–ª—å—Ç—Ä—ã
        if signal_type != "–í—Å–µ":
            signals_data = signals_data[signals_data['–¢–∏–ø'] == signal_type]
        
        if symbol_filter != "–í—Å–µ":
            signals_data = signals_data[signals_data['–°–∏–º–≤–æ–ª'] == symbol_filter]
        
        if strength_filter != "–í—Å–µ":
            signals_data = signals_data[signals_data['–°–∏–ª–∞'] == strength_filter]
        
        # –û—Ç–æ–±—Ä–∞–∂–∞–µ–º —Ç–∞–±–ª–∏—Ü—É
        st.dataframe(signals_data, use_container_width=True)
        
        # –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ —Å–∏–≥–Ω–∞–ª–æ–≤
        st.subheader("üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ —Å–∏–≥–Ω–∞–ª–æ–≤")
        
        col1, col2, col3 = st.columns(3)
        
        with col1:
            total_signals = len(signals_data)
            st.metric("–í—Å–µ–≥–æ —Å–∏–≥–Ω–∞–ª–æ–≤", total_signals)
        
        with col2:
            buy_signals = len(signals_data[signals_data['–¢–∏–ø'] == 'BUY'])
            st.metric("–ü–æ–∫—É–ø–∫–∏", buy_signals)
        
        with col3:
            sell_signals = len(signals_data[signals_data['–¢–∏–ø'] == 'SELL'])
            st.metric("–ü—Ä–æ–¥–∞–∂–∏", sell_signals)
    
    def show_analytics(self):
        """–°—Ç—Ä–∞–Ω–∏—Ü–∞ –∞–Ω–∞–ª–∏—Ç–∏–∫–∏"""
        st.title("üìä –ê–Ω–∞–ª–∏—Ç–∏–∫–∞ –∏ –æ—Ç—á–µ—Ç—ã")
        
        # –í—ã–±–æ—Ä –ø–µ—Ä–∏–æ–¥–∞
        col1, col2 = st.columns(2)
        
        with col1:
            start_date = st.date_input("–ù–∞—á–∞–ª—å–Ω–∞—è –¥–∞—Ç–∞", value=datetime.now() - timedelta(days=30))
        
        with col2:
            end_date = st.date_input("–ö–æ–Ω–µ—á–Ω–∞—è –¥–∞—Ç–∞", value=datetime.now())
        
        # –û—Å–Ω–æ–≤–Ω—ã–µ –º–µ—Ç—Ä–∏–∫–∏
        st.subheader("üìà –û—Å–Ω–æ–≤–Ω—ã–µ –º–µ—Ç—Ä–∏–∫–∏")
        
        col1, col2, col3, col4 = st.columns(4)
        
        with col1:
            st.metric("–û–±—â–∞—è –¥–æ—Ö–æ–¥–Ω–æ—Å—Ç—å", "+12.5%", "+2.1%")
        
        with col2:
            st.metric("Sharpe Ratio", "1.85", "+0.15")
        
        with col3:
            st.metric("–ú–∞–∫—Å–∏–º–∞–ª—å–Ω–∞—è –ø—Ä–æ—Å–∞–¥–∫–∞", "-3.2%", "-0.5%")
        
        with col4:
            st.metric("–ö–æ—ç—Ñ—Ñ–∏—Ü–∏–µ–Ω—Ç –ø—Ä–∏–±—ã–ª—å–Ω–æ—Å—Ç–∏", "68%", "+5%")
        
        # –ì—Ä–∞—Ñ–∏–∫ –¥–æ—Ö–æ–¥–Ω–æ—Å—Ç–∏
        st.subheader("üìä –ì—Ä–∞—Ñ–∏–∫ –¥–æ—Ö–æ–¥–Ω–æ—Å—Ç–∏")
        
        # –°–æ–∑–¥–∞–µ–º —Ç–µ—Å—Ç–æ–≤—ã–µ –¥–∞–Ω–Ω—ã–µ
        dates = pd.date_range(start=start_date, end=end_date, freq='D')
        returns_data = pd.DataFrame({
            'date': dates,
            'cumulative_return': (dates - dates[0]).days * 0.4 + pd.Series(range(len(dates))) * 0.1
        })
        
        fig = px.line(returns_data, x='date', y='cumulative_return', title='–ö—É–º—É–ª—è—Ç–∏–≤–Ω–∞—è –¥–æ—Ö–æ–¥–Ω–æ—Å—Ç—å')
        fig.update_layout(height=400)
        st.plotly_chart(fig, use_container_width=True)
        
        # –†–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ —Å–∏–≥–Ω–∞–ª–æ–≤ –ø–æ —Ç–∏–ø–∞–º
        st.subheader("üìä –†–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ —Å–∏–≥–Ω–∞–ª–æ–≤")
        
        col1, col2 = st.columns(2)
        
        with col1:
            # –ö—Ä—É–≥–æ–≤–∞—è –¥–∏–∞–≥—Ä–∞–º–º–∞ —Ç–∏–ø–æ–≤ —Å–∏–≥–Ω–∞–ª–æ–≤
            signal_counts = {'BUY': 45, 'SELL': 35, 'HOLD': 20}
            fig_pie = px.pie(values=list(signal_counts.values()), names=list(signal_counts.keys()), 
                           title='–†–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ –ø–æ —Ç–∏–ø–∞–º —Å–∏–≥–Ω–∞–ª–æ–≤')
            st.plotly_chart(fig_pie, use_container_width=True)
        
        with col2:
            # –°—Ç–æ–ª–±—á–∞—Ç–∞—è –¥–∏–∞–≥—Ä–∞–º–º–∞ –ø–æ –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç–∞–º
            symbol_counts = {'EURUSD': 25, 'GBPUSD': 20, 'BTCUSDT': 15, 'ETHUSDT': 12, 'ADAUSDT': 8}
            fig_bar = px.bar(x=list(symbol_counts.keys()), y=list(symbol_counts.values()), 
                           title='–°–∏–≥–Ω–∞–ª—ã –ø–æ –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç–∞–º')
            st.plotly_chart(fig_bar, use_container_width=True)
    
    def show_settings(self):
        """–°—Ç—Ä–∞–Ω–∏—Ü–∞ –Ω–∞—Å—Ç—Ä–æ–µ–∫"""
        st.title("‚öôÔ∏è –ù–∞—Å—Ç—Ä–æ–π–∫–∏ —Å–∏—Å—Ç–µ–º—ã")
        
        # –ù–∞—Å—Ç—Ä–æ–π–∫–∏ —Å—Ç—Ä–∞—Ç–µ–≥–∏–π
        st.subheader("ü§ñ –ù–∞—Å—Ç—Ä–æ–π–∫–∏ —Å—Ç—Ä–∞—Ç–µ–≥–∏–π")
        
        with st.expander("–°—Ç—Ä–∞—Ç–µ–≥–∏—è —Å–ª–µ–¥–æ–≤–∞–Ω–∏—è –∑–∞ —Ç—Ä–µ–Ω–¥–æ–º"):
            col1, col2 = st.columns(2)
            
            with col1:
                trend_sma = st.slider("SMA –¥–ª—è —Ç—Ä–µ–Ω–¥–∞", 20, 100, 50)
                confirmation_sma = st.slider("SMA –¥–ª—è –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è", 10, 50, 20)
            
            with col2:
                rsi_period = st.slider("–ü–µ—Ä–∏–æ–¥ RSI", 5, 30, 14)
                min_confidence = st.slider("–ú–∏–Ω–∏–º–∞–ª—å–Ω–∞—è —É–≤–µ—Ä–µ–Ω–Ω–æ—Å—Ç—å", 0.0, 1.0, 0.6)
        
        # –ù–∞—Å—Ç—Ä–æ–π–∫–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π
        st.subheader("üîî –ù–∞—Å—Ç—Ä–æ–π–∫–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π")
        
        col1, col2 = st.columns(2)
        
        with col1:
            telegram_enabled = st.checkbox("–í–∫–ª—é—á–∏—Ç—å Telegram —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è", value=True)
            email_enabled = st.checkbox("–í–∫–ª—é—á–∏—Ç—å email —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è", value=False)
        
        with col2:
            signal_frequency = st.selectbox("–ß–∞—Å—Ç–æ—Ç–∞ —Å–∏–≥–Ω–∞–ª–æ–≤", ["–í—Å–µ", "–¢–æ–ª—å–∫–æ —Å–∏–ª—å–Ω—ã–µ", "–¢–æ–ª—å–∫–æ —Å—Ä–µ–¥–Ω–∏–µ –∏ —Å–∏–ª—å–Ω—ã–µ"])
            max_signals_per_day = st.number_input("–ú–∞–∫—Å–∏–º—É–º —Å–∏–≥–Ω–∞–ª–æ–≤ –≤ –¥–µ–Ω—å", 1, 50, 10)
        
        # –ù–∞—Å—Ç—Ä–æ–π–∫–∏ —Ä–∏—Å–∫–∞
        st.subheader("‚ö†Ô∏è –ù–∞—Å—Ç—Ä–æ–π–∫–∏ —Ä–∏—Å–∫–∞")
        
        col1, col2 = st.columns(2)
        
        with col1:
            max_position_size = st.slider("–ú–∞–∫—Å–∏–º–∞–ª—å–Ω—ã–π —Ä–∞–∑–º–µ—Ä –ø–æ–∑–∏—Ü–∏–∏ (%)", 0.1, 10.0, 2.0)
            stop_loss_pct = st.slider("–°—Ç–æ–ø-–ª–æ—Å—Å (%)", 0.1, 5.0, 1.0)
        
        with col2:
            take_profit_pct = st.slider("–¢–µ–π–∫-–ø—Ä–æ—Ñ–∏—Ç (%)", 0.1, 10.0, 2.0)
            max_drawdown = st.slider("–ú–∞–∫—Å–∏–º–∞–ª—å–Ω–∞—è –ø—Ä–æ—Å–∞–¥–∫–∞ (%)", 1.0, 20.0, 5.0)
        
        # –ö–Ω–æ–ø–∫–∏ –¥–µ–π—Å—Ç–≤–∏–π
        st.markdown("---")
        
        col1, col2, col3 = st.columns(3)
        
        with col1:
            if st.button("üíæ –°–æ—Ö—Ä–∞–Ω–∏—Ç—å –Ω–∞—Å—Ç—Ä–æ–π–∫–∏"):
                st.success("–ù–∞—Å—Ç—Ä–æ–π–∫–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã!")
        
        with col2:
            if st.button("üîÑ –°–±—Ä–æ—Å–∏—Ç—å –∫ —É–º–æ–ª—á–∞–Ω–∏—è–º"):
                st.warning("–ù–∞—Å—Ç—Ä–æ–π–∫–∏ —Å–±—Ä–æ—à–µ–Ω—ã!")
        
        with col3:
            if st.button("üì§ –≠–∫—Å–ø–æ—Ä—Ç –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏"):
                st.info("–ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è —ç–∫—Å–ø–æ—Ä—Ç–∏—Ä–æ–≤–∞–Ω–∞!")


def main():
    """–ì–ª–∞–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –¥–ª—è –∑–∞–ø—É—Å–∫–∞ –¥–∞—à–±–æ—Ä–¥–∞"""
    dashboard = TradingDashboard()
    dashboard.run()


if __name__ == "__main__":
    main()


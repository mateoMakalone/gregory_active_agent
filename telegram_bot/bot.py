"""
–ê—Å–∏–Ω—Ö—Ä–æ–Ω–Ω—ã–π Telegram-–±–æ—Ç –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ —Ç–æ—Ä–≥–æ–≤—ã—Ö —Å–∏–≥–Ω–∞–ª–æ–≤
"""

import asyncio
import aiohttp
from typing import Optional, Dict, Any
from datetime import datetime
from loguru import logger

from src.core.config import config
from src.strategies.base_strategy import TradingSignal, SignalType, SignalStrength


class AsyncTelegramBot:
    """–ê—Å–∏–Ω—Ö—Ä–æ–Ω–Ω—ã–π –∫–ª–∞—Å—Å –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å Telegram-–±–æ—Ç–æ–º"""
    
    def __init__(self):
        """–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –±–æ—Ç–∞"""
        self.bot_token = config.get('api.telegram.bot_token')
        self.chat_id = config.get('api.telegram.chat_id')
        self.base_url = f"https://api.telegram.org/bot{self.bot_token}"
        
        if not self.bot_token or not self.chat_id:
            logger.warning("Telegram —Ç–æ–∫–µ–Ω –∏–ª–∏ chat_id –Ω–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω—ã")
            self.is_available = False
        else:
            self.is_available = True
            logger.info("–ê—Å–∏–Ω—Ö—Ä–æ–Ω–Ω—ã–π Telegram-–±–æ—Ç –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω")
    
    async def send_message(self, text: str, parse_mode: str = "HTML") -> bool:
        """
        –ê—Å–∏–Ω—Ö—Ä–æ–Ω–Ω–∞—è –æ—Ç–ø—Ä–∞–≤–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏—è –≤ Telegram
        
        Args:
            text: –¢–µ–∫—Å—Ç —Å–æ–æ–±—â–µ–Ω–∏—è
            parse_mode: –†–µ–∂–∏–º –ø–∞—Ä—Å–∏–Ω–≥–∞ (HTML, Markdown)
            
        Returns:
            True –µ—Å–ª–∏ —Å–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ —É—Å–ø–µ—à–Ω–æ
        """
        if not self.is_available:
            logger.warning("Telegram-–±–æ—Ç –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω")
            return False
        
        try:
            url = f"{self.base_url}/sendMessage"
            data = {
                'chat_id': self.chat_id,
                'text': text,
                'parse_mode': parse_mode
            }
            
            async with aiohttp.ClientSession() as session:
                async with session.post(url, data=data, timeout=aiohttp.ClientTimeout(total=10)) as response:
                    response.raise_for_status()
                    result = await response.json()
                    
                    if result.get('ok'):
                        logger.info("–°–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –≤ Telegram")
                        return True
                    else:
                        logger.error(f"–û—à–∏–±–∫–∞ API Telegram: {result.get('description')}")
                        return False
                        
        except asyncio.TimeoutError:
            logger.error("–¢–∞–π–º–∞—É—Ç –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ —Å–æ–æ–±—â–µ–Ω–∏—è –≤ Telegram")
            return False
        except aiohttp.ClientError as e:
            logger.error(f"–û—à–∏–±–∫–∞ HTTP –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ –≤ Telegram: {e}")
            return False
        except Exception as e:
            logger.error(f"–ù–µ–æ–∂–∏–¥–∞–Ω–Ω–∞—è –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ –≤ Telegram: {e}")
            return False
    
    async def send_signal(self, signal: TradingSignal) -> bool:
        """
        –ê—Å–∏–Ω—Ö—Ä–æ–Ω–Ω–∞—è –æ—Ç–ø—Ä–∞–≤–∫–∞ —Ç–æ—Ä–≥–æ–≤–æ–≥–æ —Å–∏–≥–Ω–∞–ª–∞
        
        Args:
            signal: –¢–æ—Ä–≥–æ–≤—ã–π —Å–∏–≥–Ω–∞–ª
            
        Returns:
            True –µ—Å–ª–∏ —Å–∏–≥–Ω–∞–ª –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω —É—Å–ø–µ—à–Ω–æ
        """
        if not self.is_available:
            logger.warning("Telegram-–±–æ—Ç –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω")
            return False
        
        try:
            # –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ
            message = self._format_signal_message(signal)
            
            # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ
            return await self.send_message(message)
            
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —Å–∏–≥–Ω–∞–ª–∞: {e}")
            return False
    
    def _format_signal_message(self, signal: TradingSignal) -> str:
        """
        –§–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Å–æ–æ–±—â–µ–Ω–∏—è —Å —Ç–æ—Ä–≥–æ–≤—ã–º —Å–∏–≥–Ω–∞–ª–æ–º
        
        Args:
            signal: –¢–æ—Ä–≥–æ–≤—ã–π —Å–∏–≥–Ω–∞–ª
            
        Returns:
            –û—Ç—Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
        """
        # –≠–º–æ–¥–∑–∏ –¥–ª—è —Ç–∏–ø–æ–≤ —Å–∏–≥–Ω–∞–ª–æ–≤
        signal_emoji = {
            SignalType.BUY: "üü¢",
            SignalType.SELL: "üî¥",
            SignalType.HOLD: "‚ö™"
        }
        
        # –≠–º–æ–¥–∑–∏ –¥–ª—è —Å–∏–ª—ã —Å–∏–≥–Ω–∞–ª–∞
        strength_emoji = {
            SignalStrength.WEAK: "‚ö°",
            SignalStrength.MEDIUM: "‚ö°‚ö°",
            SignalStrength.STRONG: "‚ö°‚ö°‚ö°"
        }
        
        # –û—Å–Ω–æ–≤–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
        message = f"""
{signal_emoji.get(signal.signal_type, '‚ùì')} <b>–¢–û–†–ì–û–í–´–ô –°–ò–ì–ù–ê–õ</b>

üìä <b>–ò–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç:</b> {signal.symbol}
üìà <b>–¢–∏–ø:</b> {signal.signal_type.value}
{strength_emoji.get(signal.strength, '‚ö°')} <b>–°–∏–ª–∞:</b> {signal.strength.name}
üí∞ <b>–¶–µ–Ω–∞:</b> {signal.price:.4f}
üéØ <b>–£–≤–µ—Ä–µ–Ω–Ω–æ—Å—Ç—å:</b> {signal.confidence:.1%}
‚è∞ <b>–í—Ä–µ–º—è:</b> {signal.timestamp.strftime('%H:%M:%S')}
üìÖ <b>–î–∞—Ç–∞:</b> {signal.timestamp.strftime('%d.%m.%Y')}
üïê <b>–¢–∞–π–º—Ñ—Ä–µ–π–º:</b> {signal.timeframe}
ü§ñ <b>–°—Ç—Ä–∞—Ç–µ–≥–∏—è:</b> {signal.strategy_name}
"""
        
        # –î–æ–±–∞–≤–ª—è–µ–º —Å—Ç–æ–ø-–ª–æ—Å—Å –∏ —Ç–µ–π–∫-–ø—Ä–æ—Ñ–∏—Ç –µ—Å–ª–∏ –µ—Å—Ç—å
        if signal.stop_loss:
            message += f"üõë <b>–°—Ç–æ–ø-–ª–æ—Å—Å:</b> {signal.stop_loss:.4f}\n"
        
        if signal.take_profit:
            message += f"üéØ <b>–¢–µ–π–∫-–ø—Ä–æ—Ñ–∏—Ç:</b> {signal.take_profit:.4f}\n"
        
        # –î–æ–±–∞–≤–ª—è–µ–º –º–µ—Ç–∞–¥–∞–Ω–Ω—ã–µ –µ—Å–ª–∏ –µ—Å—Ç—å
        if signal.metadata:
            message += "\nüìä <b>–î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–æ:</b>\n"
            for key, value in signal.metadata.items():
                if value is not None:
                    if isinstance(value, float):
                        message += f"‚Ä¢ {key}: {value:.4f}\n"
                    else:
                        message += f"‚Ä¢ {key}: {value}\n"
        
        # –î–æ–±–∞–≤–ª—è–µ–º —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏
        message += "\n‚ö†Ô∏è <b>–í–Ω–∏–º–∞–Ω–∏–µ:</b> –≠—Ç–æ —Å–∏–≥–Ω–∞–ª –¥–ª—è —Ä—É—á–Ω–æ–π —Ç–æ—Ä–≥–æ–≤–ª–∏. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ —Ä—ã–Ω–æ–∫ –ø–µ—Ä–µ–¥ –≤—Ö–æ–¥–æ–º!"
        
        return message.strip()
    
    async def send_alert(self, title: str, message: str, level: str = "INFO") -> bool:
        """
        –ê—Å–∏–Ω—Ö—Ä–æ–Ω–Ω–∞—è –æ—Ç–ø—Ä–∞–≤–∫–∞ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è
        
        Args:
            title: –ó–∞–≥–æ–ª–æ–≤–æ–∫ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è
            message: –¢–µ–∫—Å—Ç —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è
            level: –£—Ä–æ–≤–µ–Ω—å (INFO, WARNING, ERROR)
            
        Returns:
            True –µ—Å–ª–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ —É—Å–ø–µ—à–Ω–æ
        """
        if not self.is_available:
            logger.warning("Telegram-–±–æ—Ç –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω")
            return False
        
        # –≠–º–æ–¥–∑–∏ –¥–ª—è —É—Ä–æ–≤–Ω–µ–π
        level_emoji = {
            "INFO": "‚ÑπÔ∏è",
            "WARNING": "‚ö†Ô∏è",
            "ERROR": "‚ùå"
        }
        
        formatted_message = f"""
{level_emoji.get(level, '‚ÑπÔ∏è')} <b>{title}</b>

{message}

‚è∞ {datetime.now().strftime('%H:%M:%S %d.%m.%Y')}
"""
        
        return await self.send_message(formatted_message)
    
    async def send_performance_report(self, metrics: Dict[str, Any]) -> bool:
        """
        –ê—Å–∏–Ω—Ö—Ä–æ–Ω–Ω–∞—è –æ—Ç–ø—Ä–∞–≤–∫–∞ –æ—Ç—á–µ—Ç–∞ –æ –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏
        
        Args:
            metrics: –ú–µ—Ç—Ä–∏–∫–∏ –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏
            
        Returns:
            True –µ—Å–ª–∏ –æ—Ç—á–µ—Ç –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω —É—Å–ø–µ—à–Ω–æ
        """
        if not self.is_available:
            logger.warning("Telegram-–±–æ—Ç –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω")
            return False
        
        try:
            message = f"""
üìä <b>–û–¢–ß–ï–¢ –û –ü–†–û–ò–ó–í–û–î–ò–¢–ï–õ–¨–ù–û–°–¢–ò</b>

ü§ñ <b>–°—Ç—Ä–∞—Ç–µ–≥–∏—è:</b> {metrics.get('strategy_name', 'Unknown')}
üìà <b>–í—Å–µ–≥–æ —Å–∏–≥–Ω–∞–ª–æ–≤:</b> {metrics.get('total_signals', 0)}
üü¢ <b>–ü–æ–∫—É–ø–∫–∏:</b> {metrics.get('buy_signals', 0)}
üî¥ <b>–ü—Ä–æ–¥–∞–∂–∏:</b> {metrics.get('sell_signals', 0)}
üéØ <b>–°—Ä–µ–¥–Ω—è—è —É–≤–µ—Ä–µ–Ω–Ω–æ—Å—Ç—å:</b> {metrics.get('avg_confidence', 0):.1%}
üîÑ <b>–°—Ç–∞—Ç—É—Å:</b> {'–ê–∫—Ç–∏–≤–Ω–∞' if metrics.get('is_active', False) else '–ù–µ–∞–∫—Ç–∏–≤–Ω–∞'}

‚è∞ {datetime.now().strftime('%H:%M:%S %d.%m.%Y')}
"""
            
            return await self.send_message(message)
            
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ –æ—Ç—á–µ—Ç–∞: {e}")
            return False
    
    async def test_connection(self) -> bool:
        """
        –ê—Å–∏–Ω—Ö—Ä–æ–Ω–Ω–æ–µ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ Telegram API
        
        Returns:
            True –µ—Å–ª–∏ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ —É—Å–ø–µ—à–Ω–æ
        """
        if not self.is_available:
            return False
        
        try:
            url = f"{self.base_url}/getMe"
            
            async with aiohttp.ClientSession() as session:
                async with session.get(url, timeout=aiohttp.ClientTimeout(total=10)) as response:
                    response.raise_for_status()
                    result = await response.json()
                    
                    if result.get('ok'):
                        bot_info = result['result']
                        logger.info(f"Telegram-–±–æ—Ç –ø–æ–¥–∫–ª—é—á–µ–Ω: @{bot_info['username']}")
                        return True
                    else:
                        logger.error("–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –±–æ—Ç–µ")
                        return False
                        
        except asyncio.TimeoutError:
            logger.error("–¢–∞–π–º–∞—É—Ç –ø—Ä–∏ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–∏ –∫ Telegram API")
            return False
        except aiohttp.ClientError as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ Telegram API: {e}")
            return False
        except Exception as e:
            logger.error(f"–ù–µ–æ–∂–∏–¥–∞–Ω–Ω–∞—è –æ—à–∏–±–∫–∞ –ø—Ä–∏ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–∏ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è: {e}")
            return False


# –ì–ª–æ–±–∞–ª—å–Ω—ã–π —ç–∫–∑–µ–º–ø–ª—è—Ä –∞—Å–∏–Ω—Ö—Ä–æ–Ω–Ω–æ–≥–æ –±–æ—Ç–∞
async_telegram_bot = AsyncTelegramBot()
